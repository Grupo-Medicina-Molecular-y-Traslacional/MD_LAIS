/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tomocomd.camps.mdlais.gui.ui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.Hashtable;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import nu.xom.Attribute;
import nu.xom.Element;
import tomocomd.camps.mdlais.gui.CDKdesc;
import tomocomd.camps.mdlais.weights.WeightConfiguration;
import tomocomd.camps.mdlais.weights.WeightType;
import tomocomd.camps.mdlais.weights.ReferenceType;

/**
 *
 * @author anet
 */
public class FuzzyWeightDialog extends javax.swing.JDialog {

    private IFormPanel ui;
    private WeightConfiguration cutConfig;
    private final Hashtable<String, String> list_cut_off;

    public FuzzyWeightDialog(CDKdesc cdk, IFormPanel ui) {
        super(cdk, true);

        initComponents();

        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(screen.width / 2 - getSize().width / 2, screen.height / 2 - getSize().height / 2);
        setIconImage(new ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/appico.png")).getImage());

        this.ui = ui;

        cutConfig = null;
        list_cut_off = new Hashtable<>();

        secondInit();
    }

    private void secondInit() {
        ronSpinner.setEnabled(false);
        ronSpinner.setValue(0);

        list_cut_off.clear();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmb_Function = new javax.swing.JComboBox();
        roffSpinner = new javax.swing.JSpinner();
        ronSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        ronLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        cmb_reference = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        b_ok = new javax.swing.JButton();

        setTitle("Fuzzy Weight");
        setMaximumSize(new java.awt.Dimension(400, 390));
        setMinimumSize(new java.awt.Dimension(400, 390));
        setPreferredSize(new java.awt.Dimension(400, 390));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(380, 300));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(380, 300));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(380, 300));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel2.setToolTipText("");
        jPanel2.setMaximumSize(new java.awt.Dimension(360, 230));
        jPanel2.setMinimumSize(new java.awt.Dimension(360, 230));
        jPanel2.setPreferredSize(new java.awt.Dimension(360, 230));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Weighting Function:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel2.add(jLabel1, gridBagConstraints);

        cmb_Function.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SHIFTING TYPE 1", "Z-SHAPED", "PI-SHAPED", "SWITCHING", "ASCENDING GAUSSIAN", "S-SHAPED" }));
        cmb_Function.setMaximumSize(new java.awt.Dimension(180, 20));
        cmb_Function.setMinimumSize(new java.awt.Dimension(180, 20));
        cmb_Function.setPreferredSize(new java.awt.Dimension(180, 20));
        cmb_Function.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmb_FunctionItemStateChanged(evt);
            }
        });
        cmb_Function.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_FunctionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel2.add(cmb_Function, gridBagConstraints);

        roffSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.05f)));
        roffSpinner.setMaximumSize(new java.awt.Dimension(100, 20));
        roffSpinner.setMinimumSize(new java.awt.Dimension(100, 20));
        roffSpinner.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel2.add(roffSpinner, gridBagConstraints);

        ronSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.05f)));
        ronSpinner.setMaximumSize(new java.awt.Dimension(100, 20));
        ronSpinner.setMinimumSize(new java.awt.Dimension(100, 20));
        ronSpinner.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel2.add(ronSpinner, gridBagConstraints);

        jLabel2.setText("rOFF:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 25, 0, 0);
        jPanel2.add(jLabel2, gridBagConstraints);

        ronLabel.setText("rON:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 25, 0, 0);
        jPanel2.add(ronLabel, gridBagConstraints);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 60));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        jPanel2.add(jPanel6, gridBagConstraints);

        cmb_reference.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "(N) N-TERMINAL", "(M) MIDDLE", "(C) C-TERMINAL" }));
        cmb_reference.setMinimumSize(new java.awt.Dimension(180, 20));
        cmb_reference.setPreferredSize(new java.awt.Dimension(180, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel2.add(cmb_reference, gridBagConstraints);

        jLabel3.setText("Reference:");
        jLabel3.setMaximumSize(new java.awt.Dimension(92, 14));
        jLabel3.setMinimumSize(new java.awt.Dimension(92, 14));
        jLabel3.setPreferredSize(new java.awt.Dimension(92, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jLabel3, gridBagConstraints);

        jTabbedPane1.addTab("Fuzzy Weight (LGST)", jPanel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        b_ok.setText("Ok");
        b_ok.setMaximumSize(new java.awt.Dimension(115, 27));
        b_ok.setMinimumSize(new java.awt.Dimension(115, 27));
        b_ok.setPreferredSize(new java.awt.Dimension(115, 27));
        b_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_okActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 260, 0, 0);
        getContentPane().add(b_ok, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void b_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_okActionPerformed

        cutConfig = null;
        list_cut_off.clear();

        float ronValue = Float.parseFloat(ronSpinner.getValue().toString());

        float roffValue = Float.parseFloat(roffSpinner.getValue().toString());

        if (roffValue <= ronValue) {
            JOptionPane.showMessageDialog(this, "The rOFF value must be greather than the rON value",
                    "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        cutConfig = new WeightConfiguration();

        String function = (String) cmb_Function.getSelectedItem();

        String lagValue = ronSpinner.getValue().toString() + "-" + roffSpinner.getValue().toString();

        switch (function) {
            case "SHIFTING TYPE 1":
                lagValue = roffSpinner.getValue().toString();
                cutConfig.setTruncationValues(WeightType.SHIFTING1, Util.getCutoffValueList(lagValue));
                break;
            case "SWITCHING":
                cutConfig.setTruncationValues(WeightType.SWITCHING, Util.getCutoffValueList(lagValue));
                break;
            case "S-SHAPED":
                cutConfig.setTruncationValues(WeightType.S_SHAPED, Util.getCutoffValueList(lagValue));
                break;
            case "Z-SHAPED":
                cutConfig.setTruncationValues(WeightType.Z_SHAPED, Util.getCutoffValueList(lagValue));
                break;
            case "PI-SHAPED":
                cutConfig.setTruncationValues(WeightType.PI_SHAPED, Util.getCutoffValueList(lagValue));
                break;
            case "ASCENDING GAUSSIAN":
                cutConfig.setTruncationValues(WeightType.ASCENDING_GAUSSIAN, Util.getCutoffValueList(lagValue));
                break;
        }

        String reference = (String) cmb_reference.getSelectedItem();

        switch (reference) {
            case "(N) N-TERMINAL":
                cutConfig.setTruncationReferenceType(ReferenceType.N_TERMINAL);
                list_cut_off.put("lagst", lagValue);
                break;

            case "(M) MIDDLE":
                cutConfig.setTruncationReferenceType(ReferenceType.MIDDLE);
                list_cut_off.put("lagst", lagValue);
                break;

            case "(C) C-TERMINAL":
                cutConfig.setTruncationReferenceType(ReferenceType.C_TERMINAL);
                list_cut_off.put("lagst", lagValue);
                break;
        }

        setVisible(false);

    }//GEN-LAST:event_b_okActionPerformed

    private void cmb_FunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_FunctionActionPerformed

    }//GEN-LAST:event_cmb_FunctionActionPerformed

    private void cmb_FunctionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmb_FunctionItemStateChanged
        String selFunction = (String) cmb_Function.getSelectedItem();
        if (selFunction.equals("SHIFTING TYPE 1")) {
            ronSpinner.setEnabled(false);
            ronSpinner.setValue(0);
        } else {
            ronSpinner.setEnabled(true);
        }
    }//GEN-LAST:event_cmb_FunctionItemStateChanged

    public Hashtable<String, String> getCutoffList() {
        return list_cut_off;
    }

    public WeightConfiguration getCutoffConfiguration() {
        b_ok.doClick();
        return cutConfig;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_ok;
    private javax.swing.JComboBox cmb_Function;
    private javax.swing.JComboBox<String> cmb_reference;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JSpinner roffSpinner;
    private javax.swing.JLabel ronLabel;
    private javax.swing.JSpinner ronSpinner;
    // End of variables declaration//GEN-END:variables

    void readConfiguration(Element root) {
        Element e = (Element) root.getFirstChildElement("cut_off");
        int n = e.getChildCount();
        for (int i = 0; i < n; i++) {
            if (e.getChild(i) instanceof Element) {
                Element ec = (Element) e.getChild(i);
                String name = ec.getLocalName();

                setPanelAttribute(name);

                if (name.equalsIgnoreCase("lagk")) {
                    String attr = "k_" + ec.getAttributeValue("k");
                    setPanelAttribute(attr);

                    attr = "duplex_" + ec.getAttributeValue("duplex");
                    setPanelAttribute(attr);

                    attr = "ternary_" + ec.getAttributeValue("ternary");
                    setPanelAttribute(attr);

                } else if (name.equalsIgnoreCase("lagst")) {
                    String ref = "ref_" + ec.getAttributeValue("ref");
                    setPanelAttribute(ref);
                    String stattr = "st_" + ec.getAttributeValue("st");
                    setPanelAttribute(stattr);

                    String functattr = "function_" + ec.getAttributeValue("function");
                    setPanelAttribute(functattr);

                    list_cut_off.put("lagst", (String) cmb_Function.getSelectedItem());

                }
            }
        }
    }

    private void setPanelAttribute(String attribute) {
        ui.setPanelAttribute(attribute);

        switch (attribute) {
            case "lagst":
                list_cut_off.put("lagst", "");
                break;
            }

        if (attribute.startsWith("ref_")) {
            String ref = attribute.split("_")[1];

            int pos = -1;

            if (ref.equals("N-TER")) {
                pos = 0;
            }

            if (ref.equals("MIDDLE")) {
                pos = 1;
            }

            if (ref.equals("C-TER")) {
                pos = 2;
            }

            cmb_reference.setSelectedIndex(pos);
        }

        if (attribute.startsWith("st_")) {
            String attValue = attribute.split("_")[1];

            if (attValue.contains("-")) {
                String[] values = attValue.split("-");

                ronSpinner.setValue(Float.valueOf(values[0]));

                roffSpinner.setValue(Float.valueOf(values[1]));
            } else {
                ronSpinner.setValue(0f);
                roffSpinner.setValue(Float.valueOf(attValue));
            }
        }

        if (attribute.startsWith("function_")) {
            String funct = attribute.split("_")[1];
            cmb_Function.setSelectedItem(funct);
        }
    }

    void saveConfiguration(Element root, boolean isKA) {
        Element cutOff = new Element("cut_off");
        if (isKA) {
            Element newElement = new Element("all");
            cutOff.appendChild(newElement);
        }
        for (String cut : list_cut_off.keySet()) {
            Element newElement = new Element(cut);
            switch (cut) {
                case "lagst":
                    String ref = (String) cmb_reference.getSelectedItem();

                    //(N) N-TERMINAL, (M) MIDDLE, (C) C-TERMINAL
                    if (ref.equalsIgnoreCase("(N) N-TERMINAL")) {
                        ref = "N-TER";
                    } else if (ref.equalsIgnoreCase("(M) MIDDLE")) {
                        ref = "MIDDLE";
                    } else if (ref.equalsIgnoreCase("(C) C-TERMINAL")) {
                        ref = "C-TER";
                    }

                    newElement.addAttribute(new Attribute("ref", ref));
                    newElement.addAttribute(new Attribute("st", list_cut_off.get(cut)));
                    newElement.addAttribute(new Attribute("function", cmb_Function.getSelectedItem().toString()));
                    break;
            }

            cutOff.appendChild(newElement);
        }
        root.appendChild(cutOff);
    }

}
