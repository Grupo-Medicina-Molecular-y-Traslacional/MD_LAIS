/*
 * AlgebraicFormPanel.java
 *
 * Created on March 24, 2010, 10:29 PM
 */
package tomocomd.camps.mdlais.gui.ui;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import nu.xom.Element;
import org.openide.util.Exceptions;
import org.openscience.cdk.qsar.IDescriptor;
import tomocomd.camps.mdlais.descriptors.MolecularDescriptorHeading;
import tomocomd.camps.mdlais.descriptors.DefaultDescriptorListReader;
import tomocomd.camps.mdlais.gui.CDKdesc;
import tomocomd.camps.mdlais.weights.WeightConfiguration;
import tomocomd.camps.mdlais.tools.invariants.InvariantType;

/**
 *
 * @author cesar
 */
public class MDLAIsFormPanelList extends javax.swing.JPanel implements IFormPanel {

    private final CDKdesc cdk;

    private int totalDesc = 0;

    DefaultDescriptorListReader listReader;

    public MDLAIsFormPanelList(CDKdesc cdk) {
        this.cdk = cdk;

        try {
            listReader = new DefaultDescriptorListReader();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
            listReader = null;
        }

        initComponents();
    }

    /**
     * This method initialize all the controls that the application need to
     * check the first conditions
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel9 = new javax.swing.JPanel();
        cmb_proteinLists = new javax.swing.JComboBox<>();
        cb_proteinList = new javax.swing.JCheckBox();
        cmb_aalevel_list = new javax.swing.JComboBox<>();
        cb_aalevel_list = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        pasteButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setAutoscrolls(true);
        setMaximumSize(new java.awt.Dimension(540, 380));
        setMinimumSize(new java.awt.Dimension(540, 380));
        setName(""); // NOI18N
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(540, 380));
        setLayout(new java.awt.GridBagLayout());

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Default Lists", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel9.setMaximumSize(new java.awt.Dimension(510, 90));
        jPanel9.setMinimumSize(new java.awt.Dimension(510, 90));
        jPanel9.setPreferredSize(new java.awt.Dimension(510, 90));
        jPanel9.setRequestFocusEnabled(false);
        jPanel9.setLayout(new java.awt.GridBagLayout());

        cmb_proteinLists.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "List1_P_850_UW_Fuzzy", "List2_P_1300_UW_Fuzzy", "List3_P_2650_UW_Fuzzy", "List4_P_3950_UW_Fuzzy", "List5_P_5600_UW_Fuzzy", "List6_P_7000_UW_Fuzzy" }));
        cmb_proteinLists.setEnabled(false);
        cmb_proteinLists.setMaximumSize(new java.awt.Dimension(200, 22));
        cmb_proteinLists.setMinimumSize(new java.awt.Dimension(200, 22));
        cmb_proteinLists.setPreferredSize(new java.awt.Dimension(200, 22));
        cmb_proteinLists.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_proteinListsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel9.add(cmb_proteinLists, gridBagConstraints);

        cb_proteinList.setText("Whole-sequence:");
        cb_proteinList.setMaximumSize(new java.awt.Dimension(138, 25));
        cb_proteinList.setMinimumSize(new java.awt.Dimension(138, 25));
        cb_proteinList.setPreferredSize(new java.awt.Dimension(138, 25));
        cb_proteinList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_proteinListActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel9.add(cb_proteinList, gridBagConstraints);

        cmb_aalevel_list.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "List1_AA_825_UW_Fuzzy", "List2_AA_1046_UW_Fuzzy", "List3_AA_1893_UW_Fuzzy", "List4_AA_3386_UW_Fuzzy", "List5_AA_3988_UW_Fuzzy", "List6_AA_4367_UW_Fuzzy" }));
        cmb_aalevel_list.setEnabled(false);
        cmb_aalevel_list.setMaximumSize(new java.awt.Dimension(200, 22));
        cmb_aalevel_list.setMinimumSize(new java.awt.Dimension(200, 22));
        cmb_aalevel_list.setPreferredSize(new java.awt.Dimension(200, 22));
        cmb_aalevel_list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_aalevel_listActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel9.add(cmb_aalevel_list, gridBagConstraints);

        cb_aalevel_list.setText("Amino Acid-Level:");
        cb_aalevel_list.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_aalevel_list.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_aalevel_list.setPreferredSize(new java.awt.Dimension(150, 25));
        cb_aalevel_list.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_aalevel_listActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 14, 0, 0);
        jPanel9.add(cb_aalevel_list, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPanel9, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Custom List", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel2.setMinimumSize(new java.awt.Dimension(510, 290));
        jPanel2.setPreferredSize(new java.awt.Dimension(510, 290));

        jScrollPane1.setBorder(null);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(490, 220));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(490, 220));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setViewportView(jTextArea1);

        jPanel2.add(jScrollPane1);

        jPanel1.setMinimumSize(new java.awt.Dimension(500, 30));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 30));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        pasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/menu/paste.png"))); // NOI18N
        pasteButton.setText("Paste");
        pasteButton.setToolTipText("Paste a descriptor list into the textarea");
        pasteButton.setMaximumSize(new java.awt.Dimension(120, 25));
        pasteButton.setMinimumSize(new java.awt.Dimension(120, 25));
        pasteButton.setPreferredSize(new java.awt.Dimension(120, 25));
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(pasteButton, gridBagConstraints);

        importButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/menu/import-csv-16.png"))); // NOI18N
        importButton.setText("Import");
        importButton.setToolTipText("Import a list from a CSV file");
        importButton.setMaximumSize(new java.awt.Dimension(120, 25));
        importButton.setMinimumSize(new java.awt.Dimension(120, 25));
        importButton.setPreferredSize(new java.awt.Dimension(120, 25));
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(importButton, gridBagConstraints);

        copyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/menu/copy-to-clipboard-16.png"))); // NOI18N
        copyButton.setText("Copy");
        copyButton.setToolTipText("Copy the contents of the custom descriptors list to clipboard");
        copyButton.setMaximumSize(new java.awt.Dimension(120, 25));
        copyButton.setMinimumSize(new java.awt.Dimension(120, 25));
        copyButton.setPreferredSize(new java.awt.Dimension(120, 25));
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(copyButton, gridBagConstraints);

        clearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/menu/delete-16.png"))); // NOI18N
        clearButton.setText("Clear");
        clearButton.setToolTipText("Clear the custom descriptor list");
        clearButton.setMaximumSize(new java.awt.Dimension(120, 25));
        clearButton.setMinimumSize(new java.awt.Dimension(120, 25));
        clearButton.setPreferredSize(new java.awt.Dimension(120, 25));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(clearButton, gridBagConstraints);

        jPanel2.add(jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(jPanel2, gridBagConstraints);

        getAccessibleContext().setAccessibleParent(this);
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        jTextArea1.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        try {
            doLoadProject(false);
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        Toolkit.getDefaultToolkit()
                .getSystemClipboard()
                .setContents(
                        new StringSelection(jTextArea1.getText()),
                        null
                );
    }//GEN-LAST:event_copyButtonActionPerformed

    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        jTextArea1.paste();
    }//GEN-LAST:event_pasteButtonActionPerformed

    private void cb_proteinListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_proteinListActionPerformed
        if (cb_proteinList.isSelected()) {
            cmb_proteinLists.setEnabled(true);
            cmb_aalevel_list.setEnabled(false);
            cb_aalevel_list.setSelected(false);
        } else {
            cmb_proteinLists.setEnabled(false);
        }
    }//GEN-LAST:event_cb_proteinListActionPerformed

    private void cmb_proteinListsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_proteinListsActionPerformed


    }//GEN-LAST:event_cmb_proteinListsActionPerformed

    private void cmb_aalevel_listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_aalevel_listActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_aalevel_listActionPerformed

    private void cb_aalevel_listActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_aalevel_listActionPerformed
        if (cb_aalevel_list.isSelected()) {
            cmb_aalevel_list.setEnabled(true);
            cb_proteinList.setSelected(false);
            cmb_proteinLists.setEnabled(false);
        } else {
            cmb_aalevel_list.setEnabled(false);
        }
    }//GEN-LAST:event_cb_aalevel_listActionPerformed

    private int cSelectedDescriptors;

    public void doLoadProject(boolean multipleSelectionEnabled) throws IOException {
        JFileChooser fileDialog = new JFileChooser();

        File inputDirectory = new File(System.getProperty("user.dir"), "projects");

        Preferences prefs = Preferences.userNodeForPackage(cdk.getClass());
        String lastInputDirectory = prefs.get("LAST_INPUT_DIR", "");

        if (!lastInputDirectory.equals("")) {
            fileDialog.setCurrentDirectory(new File(lastInputDirectory));
        } else if (inputDirectory.exists()) {
            fileDialog.setCurrentDirectory(inputDirectory);
        }

        fileDialog.setApproveButtonText("Load File(s)");
        fileDialog.setDialogTitle("Load Descriptor Lists");
        fileDialog.setAcceptAllFileFilterUsed(false);
        fileDialog.setMultiSelectionEnabled(multipleSelectionEnabled);

        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Project Files (CSV)", new String[]{"csv"});
        fileDialog.setFileFilter(fileFilter);
        int status = fileDialog.showOpenDialog(this);

        if (status == JFileChooser.APPROVE_OPTION) {
            File[] settingFiles = multipleSelectionEnabled ? fileDialog.getSelectedFiles() : new File[]{fileDialog.getSelectedFile()};

            for (File settingsFile : settingFiles) {
                MolecularDescriptorHeading dh = new MolecularDescriptorHeading();

                List<IDescriptor> descriptors = dh.getAlgebraicDescriptorListFromList(settingsFile);

                int duplicatedCount = 0;
                String history = "";

                if (!descriptors.isEmpty()) {
                    if (!dh.getExceptionList().isEmpty()) {
                        history += "\r\nProject " + settingsFile.getName() + " was not sucessfully verified, it contains the following invalid descriptor definitions:";

                        JOptionPane.showMessageDialog(cdk, "Descriptor list contains some invalid descriptor definitions",
                                "Information", JOptionPane.WARNING_MESSAGE);
                    } else {
                        cdk.getUI().getStatusArea().append("\r\nProject " + settingsFile.getName() + " was sucessfully verified");
                        JOptionPane.showMessageDialog(cdk, "Descriptor list was successfully loaded",
                                "Information", JOptionPane.INFORMATION_MESSAGE);
                        cdk.getUI().getStatusArea().append("\r\nProject was Loaded.");
                    }

                    jTextArea1.setText("");

                    BufferedReader br = null;

                    try {
                        br = new BufferedReader(new FileReader(settingsFile));
                    } catch (FileNotFoundException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                    String line = br.readLine();

                    List<String> headingList = new LinkedList<>();

                    while (line != null) {
                        List<String> auxList = new LinkedList<>();

                        String auxline = line.trim();

                        if (!auxline.isEmpty()) {
                            auxList.add(auxline);

                            if (!dh.getAlgebraicDescriptorList(auxList).isEmpty()) {
                                boolean containElement = headingList.contains(auxline);

                                if (!containElement) {
                                    headingList.add(auxline);
                                } else {
                                    duplicatedCount++;
                                }

                            } else {
                                history += "\r\n" + auxline + " was not recognized as a descriptor heading";
                            }
                        }

                        line = br.readLine();
                    }

                    br.close();

                    String headingListAsString = "";

                    for (int i = 0; i < headingList.size() - 1; i++) {
                        headingListAsString += headingList.get(i) + "\n";
                    }

                    headingListAsString += headingList.get(headingList.size() - 1);

                    jTextArea1.setText(headingListAsString);

                    jTextArea1.setCaretPosition(0);

                    if (duplicatedCount > 0) {
                        history += "\r\n" + "Found duplicated headings, only unique entries were rettained";
                    }

                } else {
                    JOptionPane.showMessageDialog(this,
                            "The settings file contained invalid descriptor list definition",
                            "ToMoCOMD-CAMPS Error",
                            JOptionPane.ERROR_MESSAGE);
                }

                cdk.getUI().getStatusArea().append(history);
            }
        }
    }

    public void doSaveProject(String path) throws IOException {
        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(path)));

        List<String> headings = getDescriptorHeadings();

        for (String defaultHeading : headings) {
            bw.write(defaultHeading + "\n");
        }

        String[] customHeadings = jTextArea1.getText().split("\n");

        for (String customHeading : customHeadings) {
            bw.write(customHeading + "\n");
        }

        bw.close();

    }

    public List<String> getDescriptorHeadings() {
        String list = null;

        if (cb_proteinList.isSelected()) {
            list = (String) cmb_proteinLists.getSelectedItem();
        }

        if (cb_aalevel_list.isSelected()) {
            list = (String) cmb_aalevel_list.getSelectedItem();
        }

        if (list != null) {
            return listReader.getDescriptorLists().get(list);
        } else {
            return new LinkedList<>();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cb_aalevel_list;
    private javax.swing.JCheckBox cb_proteinList;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox<String> cmb_aalevel_list;
    private javax.swing.JComboBox<String> cmb_proteinLists;
    private javax.swing.JButton copyButton;
    private javax.swing.JButton importButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton pasteButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public ArrayList<String> getInvariantsList() {
        return null;
    }

    @Override
    public ArrayList<String> getNoClassicsInvariantList() {
        return null;
    }

    @Override
    public ArrayList<String> getClassicsInvariantList() {
        return null;
    }

    @Override
    public int getSelectedDescriptors() {
        return cSelectedDescriptors;
    }

    @Override
    public int getTotalDesc() {
        return totalDesc;
    }

    @Override
    public ArrayList<String> getGroupsList() {
        return null;
    }

    @Override
    public Hashtable<String, String> getCutOffsList() {
        return null;
    }

    @Override
    public void setPanelAttribute(String attribute) {

    }

    @Override
    public boolean doApply() {
        if (!jTextArea1.getText().trim().isEmpty()) {
            String[] customHeads = jTextArea1.getText().split("\n");

            jTextArea1.getHighlighter().removeAllHighlights();

            MolecularDescriptorHeading dh = new MolecularDescriptorHeading();

            boolean invalidDesc = false;
            boolean duplicatedDesc = false;
            int len = 0;

            List<String> duplicated = new LinkedList<>();
            List<String> headings = new LinkedList<>();

            for (int i = 0; i < customHeads.length; i++) {
                String customHead = customHeads[i];

                len += customHead.length();

                if (!headings.contains(customHead)) {
                    headings.add(customHead);
                } else {
                    duplicatedDesc = true;
                    duplicated.add(customHead);
                }

                if (dh.decode(customHead) == null) {
                    invalidDesc = true;
                    Highlighter.HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.RED);
                    try {
                        jTextArea1.getHighlighter().addHighlight(jTextArea1.getLineStartOffset(i), jTextArea1.getLineEndOffset(i), painter);
                    } catch (BadLocationException ex) {
                        Exceptions.printStackTrace(ex);
                    }
                    //jTextArea1.setCaretPosition(len);
                    //break;
                }
            }

            if (invalidDesc) {
                JOptionPane.showMessageDialog(cdk, "Please fix/remove wrong headings",
                        "Warning", JOptionPane.WARNING_MESSAGE);

                return false;
            }

            if (duplicatedDesc) {
                JOptionPane.showMessageDialog(cdk, "Please remove duplicated entries: see logs for details",
                        "Warning", JOptionPane.WARNING_MESSAGE);

                String history = "==Duplicated headings== : " + "\n";

                for (String dup : duplicated) {
                    history += dup + "\n";
                }

                cdk.getUI().getStatusArea().append(history);

                return false;
            }
        }

        boolean hasDescriptors = !getDescriptorList().isEmpty();

        if (!hasDescriptors) {
            JOptionPane.showMessageDialog(cdk, "You must configure at least one descriptor",
                    "Warning", JOptionPane.WARNING_MESSAGE);
        }

        return hasDescriptors;
    }

    @Override
    public void initialize() {
        jTextArea1.setText("");
    }

    @Override
    public void setBlockDuringCompute(boolean status) {

    }

    @Override
    public WeightConfiguration getCutoffConfiguration() {
        return null;
    }

    @Override
    public void readConfiguration(Element root) {
    }

    @Override
    public void saveConfiguration(Element root) {

    }

    @Override
    public ArrayList<String> getAminoAcidPropertiesList() {
        return null;
    }

    public PropertiesDialog getPropsDialog() {
        return null;
    }

    @Override
    public void setAALevel() {
//        boolean status = locales_dialog.isAALevel();
//
//        cdk.getUI().setIsAA_level(status);
    }

    @Override
    public List<IDescriptor> getDescriptorList() {
        List<String> headings = new LinkedList<>();

        List<IDescriptor> selectedDescriptors = new ArrayList<>();

        // feed from default list
        headings.addAll(getDescriptorHeadings());

        // custom lists
        String[] customHeads = jTextArea1.getText().split("\n");

        for (String customHead : customHeads) {
            headings.add(customHead);
        }

        selectedDescriptors.addAll(new MolecularDescriptorHeading().getAlgebraicDescriptorList(headings));

        totalDesc = selectedDescriptors.size();

        return selectedDescriptors;
    }

    @Override
    public HashMap<InvariantType, Object[]> getInvParameters() {
        return null;
    }
}
