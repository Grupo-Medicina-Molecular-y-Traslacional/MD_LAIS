
/*
 * InvariantsDialog.java
 *
 * Created on Feb 23, 2011, 12:01:20 AM
 */
package tomocomd.camps.mdlais.gui.ui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import nu.xom.Element;
import tomocomd.camps.mdlais.gui.CDKdesc;
import tomocomd.camps.mdlais.local.LocalType;

/**
 *
 * @author crjacas
 */
public class GroupsDialog extends javax.swing.JDialog {

    private final int TOTAL_SIDE_CHAIN_SECONDARY_STRUCTURE_LOCALS = 10;

    private final int TOTAL_AMINOACIDS_LOCALS = 20;

    private final int TOTAL_AMINOACIDS_KMERS = 8400;

    private int currentSideChainSecondaryStructure;

    private int currentAminoAcidLocals;

    private int currentKmers;

    private int currentMotifs;

    private final ArrayList<String> list_Groups;

    private ListDialog4KMers kMerListDialog;

    private ListDialog4KMers motifListDialog;

    private ArrayList<String> list_Kmers;

    private ArrayList<String> list_Motifs;

    ArrayList<String> currentMotif;

    public GroupsDialog(CDKdesc cdk) {
        super(cdk, true);

        initComponents();
        
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screen.width / 2 - getSize().width / 2) - 38, screen.height / 2 - getSize().height / 2);
        setIconImage(new ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/appico.png")).getImage());
        
        jTabbedPane1.remove(4);
        jTabbedPane1.remove(3);
        
        list_Groups = new ArrayList<>();
        list_Kmers = new ArrayList<>();
        list_Motifs = new ArrayList<>();
        currentMotif = new ArrayList<>();

        fillKMersList();

        fillBaseGroupList();

        kMerListDialog = new ListDialog4KMers("K-Mer List", this, false, new IListDialog4KMers() {
            @Override
            public void updateKMerList(String key) {

            }

            @Override
            public void removeKMer(String key) {
                list_Kmers.remove(key);
                kMerListDialog.updateList(list_Kmers);
                lb_configurations.setText(list_Kmers.size() + " configurations");
            }
        });

        motifListDialog = new ListDialog4KMers("Motif List", this, false, new IListDialog4KMers() {
            @Override
            public void updateKMerList(String key) {

            }

            @Override
            public void removeKMer(String key) {
                list_Motifs.remove(key);
                motifListDialog.updateList(list_Motifs);
                lb_configurations_motifs.setText(list_Motifs.size() + " configurations");
            }
        });
    }

    public ArrayList<String> getList_Groups() {
        return list_Groups;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        cb_aromatic = new javax.swing.JCheckBox();
        cb_alpha_helix_favoring = new javax.swing.JCheckBox();
        cb_apolar = new javax.swing.JCheckBox();
        cb_beta_sheet_favoring = new javax.swing.JCheckBox();
        cb_polar_pos_charged = new javax.swing.JCheckBox();
        cb_polar_neg_charged = new javax.swing.JCheckBox();
        cb_aliphatic = new javax.swing.JCheckBox();
        cb_unfolding = new javax.swing.JCheckBox();
        cb_beta_turn_favoring = new javax.swing.JCheckBox();
        cb_polar_uncharged = new javax.swing.JCheckBox();
        jPanel34 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        groupsToggleButton = new javax.swing.JToggleButton();
        jPanel32 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        cb_alanine = new javax.swing.JCheckBox();
        cb_arginine = new javax.swing.JCheckBox();
        cb_asparagine = new javax.swing.JCheckBox();
        cb_glutamate = new javax.swing.JCheckBox();
        cb_lysine = new javax.swing.JCheckBox();
        cb_methionine = new javax.swing.JCheckBox();
        cb_phenylalanine = new javax.swing.JCheckBox();
        cb_glutamine = new javax.swing.JCheckBox();
        cb_serine = new javax.swing.JCheckBox();
        cb_proline = new javax.swing.JCheckBox();
        cb_aspartate = new javax.swing.JCheckBox();
        cb_cysteine = new javax.swing.JCheckBox();
        cb_threonine = new javax.swing.JCheckBox();
        cb_tryptophan = new javax.swing.JCheckBox();
        cb_histidine = new javax.swing.JCheckBox();
        cb_tyrosine = new javax.swing.JCheckBox();
        cb_isoleucine = new javax.swing.JCheckBox();
        cb_valine = new javax.swing.JCheckBox();
        cb_leucine = new javax.swing.JCheckBox();
        cb_glycine = new javax.swing.JCheckBox();
        jPanel19 = new javax.swing.JPanel();
        aminoAcidGroupsToggleButton = new javax.swing.JToggleButton();
        jPanel33 = new javax.swing.JPanel();
        kmerPanel = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        lb_configurations = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        button_rm_Kmer = new javax.swing.JButton();
        b_add_kmer = new javax.swing.JButton();
        button_defaultKmers = new javax.swing.JButton();
        jPanel35 = new javax.swing.JPanel();
        jScrollPane2mer = new javax.swing.JScrollPane();
        jList2mer = new javax.swing.JList<>();
        jScrollPane3mer = new javax.swing.JScrollPane();
        jList3mer = new javax.swing.JList<>();
        laiPanel = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        cb_aaLevel = new javax.swing.JCheckBox();
        jPanel30 = new javax.swing.JPanel();
        spinnerWindowSize = new javax.swing.JSpinner();
        jPanel31 = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        motifPanel = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        lb_configurations_motifs = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        button_rm_motif = new javax.swing.JButton();
        b_add_motif = new javax.swing.JButton();
        button_defaultMotifs = new javax.swing.JButton();
        jPanel37 = new javax.swing.JPanel();
        jScrollPane2mer1 = new javax.swing.JScrollPane();
        jList_basegroups = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        b_check_all = new javax.swing.JButton();
        b_uncheck_all = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        b_ok = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Groups");
        setMaximumSize(new java.awt.Dimension(540, 395));
        setMinimumSize(new java.awt.Dimension(540, 395));
        setPreferredSize(new java.awt.Dimension(540, 395));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setMaximumSize(new java.awt.Dimension(520, 310));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(520, 310));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(520, 310));
        jTabbedPane1.setRequestFocusEnabled(false);

        jPanel2.setDoubleBuffered(false);
        jPanel2.setMaximumSize(new java.awt.Dimension(500, 280));
        jPanel2.setMinimumSize(new java.awt.Dimension(500, 280));
        jPanel2.setPreferredSize(new java.awt.Dimension(500, 280));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel14.setMaximumSize(new java.awt.Dimension(500, 240));
        jPanel14.setMinimumSize(new java.awt.Dimension(500, 240));
        jPanel14.setPreferredSize(new java.awt.Dimension(500, 240));
        jPanel14.setLayout(new java.awt.GridBagLayout());

        cb_aromatic.setText("(ARO) Aromatic");
        cb_aromatic.setMaximumSize(new java.awt.Dimension(200, 25));
        cb_aromatic.setMinimumSize(new java.awt.Dimension(200, 25));
        cb_aromatic.setPreferredSize(new java.awt.Dimension(220, 25));
        cb_aromatic.setRequestFocusEnabled(false);
        cb_aromatic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_aromaticActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel14.add(cb_aromatic, gridBagConstraints);

        cb_alpha_helix_favoring.setText("(FAH) Î±-helix favoring ");
        cb_alpha_helix_favoring.setMaximumSize(new java.awt.Dimension(265, 25));
        cb_alpha_helix_favoring.setMinimumSize(new java.awt.Dimension(265, 25));
        cb_alpha_helix_favoring.setPreferredSize(new java.awt.Dimension(260, 25));
        cb_alpha_helix_favoring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_alpha_helix_favoringActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel14.add(cb_alpha_helix_favoring, gridBagConstraints);

        cb_apolar.setText("(RAP) Apolar");
        cb_apolar.setMaximumSize(new java.awt.Dimension(200, 25));
        cb_apolar.setMinimumSize(new java.awt.Dimension(200, 25));
        cb_apolar.setPreferredSize(new java.awt.Dimension(220, 25));
        cb_apolar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_apolarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel14.add(cb_apolar, gridBagConstraints);

        cb_beta_sheet_favoring.setText("(FBS) Î²-sheet favoring");
        cb_beta_sheet_favoring.setMaximumSize(new java.awt.Dimension(265, 25));
        cb_beta_sheet_favoring.setMinimumSize(new java.awt.Dimension(265, 25));
        cb_beta_sheet_favoring.setPreferredSize(new java.awt.Dimension(260, 25));
        cb_beta_sheet_favoring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_beta_sheet_favoringActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel14.add(cb_beta_sheet_favoring, gridBagConstraints);

        cb_polar_pos_charged.setText("(RPC) Polar positively charged");
        cb_polar_pos_charged.setMaximumSize(new java.awt.Dimension(200, 25));
        cb_polar_pos_charged.setMinimumSize(new java.awt.Dimension(200, 25));
        cb_polar_pos_charged.setPreferredSize(new java.awt.Dimension(220, 25));
        cb_polar_pos_charged.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_polar_pos_chargedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel14.add(cb_polar_pos_charged, gridBagConstraints);

        cb_polar_neg_charged.setText("(RNC) Polar negatively charged");
        cb_polar_neg_charged.setMaximumSize(new java.awt.Dimension(200, 25));
        cb_polar_neg_charged.setMinimumSize(new java.awt.Dimension(200, 25));
        cb_polar_neg_charged.setPreferredSize(new java.awt.Dimension(220, 25));
        cb_polar_neg_charged.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_polar_neg_chargedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel14.add(cb_polar_neg_charged, gridBagConstraints);

        cb_aliphatic.setText("(ALG) Aliphatic");
        cb_aliphatic.setMaximumSize(new java.awt.Dimension(200, 25));
        cb_aliphatic.setMinimumSize(new java.awt.Dimension(200, 25));
        cb_aliphatic.setPreferredSize(new java.awt.Dimension(220, 25));
        cb_aliphatic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_aliphaticActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel14.add(cb_aliphatic, gridBagConstraints);

        cb_unfolding.setText("(UFG) Uncommon in Î±-helix/Î²-sheet  ");
        cb_unfolding.setMaximumSize(new java.awt.Dimension(275, 25));
        cb_unfolding.setMinimumSize(new java.awt.Dimension(275, 25));
        cb_unfolding.setPreferredSize(new java.awt.Dimension(260, 25));
        cb_unfolding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_unfoldingActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel14.add(cb_unfolding, gridBagConstraints);

        cb_beta_turn_favoring.setText("(AFT) Î²-turn favoring");
        cb_beta_turn_favoring.setMaximumSize(new java.awt.Dimension(265, 25));
        cb_beta_turn_favoring.setMinimumSize(new java.awt.Dimension(265, 25));
        cb_beta_turn_favoring.setPreferredSize(new java.awt.Dimension(260, 25));
        cb_beta_turn_favoring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_beta_turn_favoringActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel14.add(cb_beta_turn_favoring, gridBagConstraints);

        cb_polar_uncharged.setText("(RPU) Polar uncharged");
        cb_polar_uncharged.setMaximumSize(new java.awt.Dimension(180, 25));
        cb_polar_uncharged.setMinimumSize(new java.awt.Dimension(180, 25));
        cb_polar_uncharged.setPreferredSize(new java.awt.Dimension(220, 25));
        cb_polar_uncharged.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_polar_unchargedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel14.add(cb_polar_uncharged, gridBagConstraints);

        jPanel34.setPreferredSize(new java.awt.Dimension(10, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        jPanel14.add(jPanel34, gridBagConstraints);

        jPanel2.add(jPanel14, new java.awt.GridBagConstraints());

        jPanel17.setMaximumSize(new java.awt.Dimension(500, 40));
        jPanel17.setMinimumSize(new java.awt.Dimension(500, 40));
        jPanel17.setPreferredSize(new java.awt.Dimension(500, 40));
        jPanel17.setLayout(new java.awt.GridBagLayout());

        groupsToggleButton.setText("Check");
        groupsToggleButton.setMaximumSize(new java.awt.Dimension(95, 27));
        groupsToggleButton.setMinimumSize(new java.awt.Dimension(95, 27));
        groupsToggleButton.setPreferredSize(new java.awt.Dimension(95, 27));
        groupsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupsToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel17.add(groupsToggleButton, gridBagConstraints);

        jPanel32.setPreferredSize(new java.awt.Dimension(375, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel17.add(jPanel32, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jPanel17, gridBagConstraints);

        jTabbedPane1.addTab("Chemical-Structural", jPanel2);

        jPanel3.setMaximumSize(new java.awt.Dimension(500, 280));
        jPanel3.setName(""); // NOI18N
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel1.setMaximumSize(new java.awt.Dimension(500, 240));
        jPanel1.setMinimumSize(new java.awt.Dimension(500, 240));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 240));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        cb_alanine.setText("(ALA) Alanine");
        cb_alanine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_alanine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_alanine.setPreferredSize(new java.awt.Dimension(150, 25));
        cb_alanine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_alanineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(cb_alanine, gridBagConstraints);

        cb_arginine.setText("(ARG) Arginine");
        cb_arginine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_arginine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_arginine.setPreferredSize(new java.awt.Dimension(150, 25));
        cb_arginine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_arginineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(cb_arginine, gridBagConstraints);

        cb_asparagine.setText("(ASN) Asparagine");
        cb_asparagine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_asparagine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_asparagine.setPreferredSize(new java.awt.Dimension(150, 25));
        cb_asparagine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_asparagineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(cb_asparagine, gridBagConstraints);

        cb_glutamate.setText("(GLU) Glutamate");
        cb_glutamate.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_glutamate.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_glutamate.setPreferredSize(new java.awt.Dimension(150, 25));
        cb_glutamate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_glutamateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(cb_glutamate, gridBagConstraints);

        cb_lysine.setText("(LYS) Lysine");
        cb_lysine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_lysine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_lysine.setPreferredSize(new java.awt.Dimension(160, 25));
        cb_lysine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_lysineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(cb_lysine, gridBagConstraints);

        cb_methionine.setText("(MET) Methionine ");
        cb_methionine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_methionine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_methionine.setPreferredSize(new java.awt.Dimension(160, 25));
        cb_methionine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_methionineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(cb_methionine, gridBagConstraints);

        cb_phenylalanine.setText("(PHE) Phenylalanine");
        cb_phenylalanine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_phenylalanine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_phenylalanine.setPreferredSize(new java.awt.Dimension(160, 25));
        cb_phenylalanine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_phenylalanineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(cb_phenylalanine, gridBagConstraints);

        cb_glutamine.setText("(GLN) Glutamine");
        cb_glutamine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_glutamine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_glutamine.setPreferredSize(new java.awt.Dimension(160, 25));
        cb_glutamine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_glutamineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        jPanel1.add(cb_glutamine, gridBagConstraints);

        cb_serine.setText("(SER) Serine");
        cb_serine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_serine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_serine.setPreferredSize(new java.awt.Dimension(170, 25));
        cb_serine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_serineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(cb_serine, gridBagConstraints);

        cb_proline.setText("(PRO) Proline");
        cb_proline.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_proline.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_proline.setPreferredSize(new java.awt.Dimension(170, 25));
        cb_proline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_prolineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(cb_proline, gridBagConstraints);

        cb_aspartate.setText("(ASP) Aspartate");
        cb_aspartate.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_aspartate.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_aspartate.setPreferredSize(new java.awt.Dimension(150, 25));
        cb_aspartate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_aspartateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(cb_aspartate, gridBagConstraints);

        cb_cysteine.setText("(CYS) Cysteine");
        cb_cysteine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_cysteine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_cysteine.setPreferredSize(new java.awt.Dimension(150, 25));
        cb_cysteine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_cysteineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(cb_cysteine, gridBagConstraints);

        cb_threonine.setText("(THR) Threonine");
        cb_threonine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_threonine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_threonine.setPreferredSize(new java.awt.Dimension(170, 25));
        cb_threonine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_threonineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(cb_threonine, gridBagConstraints);

        cb_tryptophan.setText("(TRP) Tryptophan");
        cb_tryptophan.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_tryptophan.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_tryptophan.setPreferredSize(new java.awt.Dimension(170, 25));
        cb_tryptophan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_tryptophanActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(cb_tryptophan, gridBagConstraints);

        cb_histidine.setText("(HIS) Histidine");
        cb_histidine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_histidine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_histidine.setPreferredSize(new java.awt.Dimension(160, 25));
        cb_histidine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_histidineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        jPanel1.add(cb_histidine, gridBagConstraints);

        cb_tyrosine.setText("(TYR) Tyrosine");
        cb_tyrosine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_tyrosine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_tyrosine.setPreferredSize(new java.awt.Dimension(170, 25));
        cb_tyrosine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_tyrosineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(cb_tyrosine, gridBagConstraints);

        cb_isoleucine.setText("(ILE) Isoleucine");
        cb_isoleucine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_isoleucine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_isoleucine.setPreferredSize(new java.awt.Dimension(150, 25));
        cb_isoleucine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_isoleucineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(cb_isoleucine, gridBagConstraints);

        cb_valine.setText("(VAL) Valine");
        cb_valine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_valine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_valine.setPreferredSize(new java.awt.Dimension(170, 25));
        cb_valine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_valineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(cb_valine, gridBagConstraints);

        cb_leucine.setText("(LEU) Leucine");
        cb_leucine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_leucine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_leucine.setPreferredSize(new java.awt.Dimension(160, 25));
        cb_leucine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_leucineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        jPanel1.add(cb_leucine, gridBagConstraints);

        cb_glycine.setText("(GLY) Glycine");
        cb_glycine.setMaximumSize(new java.awt.Dimension(150, 25));
        cb_glycine.setMinimumSize(new java.awt.Dimension(150, 25));
        cb_glycine.setPreferredSize(new java.awt.Dimension(160, 25));
        cb_glycine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_glycineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        jPanel1.add(cb_glycine, gridBagConstraints);

        jPanel3.add(jPanel1, new java.awt.GridBagConstraints());

        jPanel19.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel19.setMaximumSize(new java.awt.Dimension(500, 40));
        jPanel19.setMinimumSize(new java.awt.Dimension(500, 40));
        jPanel19.setPreferredSize(new java.awt.Dimension(500, 40));
        jPanel19.setLayout(new java.awt.GridBagLayout());

        aminoAcidGroupsToggleButton.setText("Check");
        aminoAcidGroupsToggleButton.setMaximumSize(new java.awt.Dimension(95, 27));
        aminoAcidGroupsToggleButton.setMinimumSize(new java.awt.Dimension(95, 27));
        aminoAcidGroupsToggleButton.setPreferredSize(new java.awt.Dimension(95, 27));
        aminoAcidGroupsToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aminoAcidGroupsToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel19.add(aminoAcidGroupsToggleButton, gridBagConstraints);

        jPanel33.setPreferredSize(new java.awt.Dimension(375, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel19.add(jPanel33, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(jPanel19, gridBagConstraints);

        jTabbedPane1.addTab("R-Group", jPanel3);

        kmerPanel.setDoubleBuffered(false);
        kmerPanel.setMaximumSize(new java.awt.Dimension(500, 280));
        kmerPanel.setMinimumSize(new java.awt.Dimension(500, 280));
        kmerPanel.setPreferredSize(new java.awt.Dimension(500, 280));
        kmerPanel.setLayout(new java.awt.BorderLayout());

        jPanel26.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel26.setPreferredSize(new java.awt.Dimension(2, 40));
        jPanel26.setLayout(new java.awt.GridBagLayout());

        lb_configurations.setText("0 configurations");
        lb_configurations.setMaximumSize(new java.awt.Dimension(100, 16));
        lb_configurations.setMinimumSize(new java.awt.Dimension(100, 16));
        lb_configurations.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel26.add(lb_configurations, gridBagConstraints);

        jButton5.setText("View");
        jButton5.setToolTipText("Shows list of K-Mers");
        jButton5.setMaximumSize(new java.awt.Dimension(95, 27));
        jButton5.setMinimumSize(new java.awt.Dimension(95, 27));
        jButton5.setPreferredSize(new java.awt.Dimension(95, 27));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel26.add(jButton5, gridBagConstraints);

        button_rm_Kmer.setText("Remove");
        button_rm_Kmer.setToolTipText("Clear all selections and empty the list of K-Mers");
        button_rm_Kmer.setMaximumSize(new java.awt.Dimension(95, 27));
        button_rm_Kmer.setMinimumSize(new java.awt.Dimension(95, 27));
        button_rm_Kmer.setPreferredSize(new java.awt.Dimension(95, 27));
        button_rm_Kmer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_rm_KmerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel26.add(button_rm_Kmer, gridBagConstraints);

        b_add_kmer.setText("Add");
        b_add_kmer.setToolTipText("Adds the selected K-Mers");
        b_add_kmer.setMaximumSize(new java.awt.Dimension(95, 27));
        b_add_kmer.setMinimumSize(new java.awt.Dimension(95, 27));
        b_add_kmer.setPreferredSize(new java.awt.Dimension(95, 27));
        b_add_kmer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_add_kmerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel26.add(b_add_kmer, gridBagConstraints);

        button_defaultKmers.setText("Default");
        button_defaultKmers.setToolTipText("Adds the default list of K-Mers");
        button_defaultKmers.setMaximumSize(new java.awt.Dimension(95, 27));
        button_defaultKmers.setMinimumSize(new java.awt.Dimension(95, 27));
        button_defaultKmers.setPreferredSize(new java.awt.Dimension(95, 27));
        button_defaultKmers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_defaultKmersActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel26.add(button_defaultKmers, gridBagConstraints);

        kmerPanel.add(jPanel26, java.awt.BorderLayout.SOUTH);

        jPanel35.setMaximumSize(new java.awt.Dimension(150, 240));
        jPanel35.setMinimumSize(new java.awt.Dimension(150, 240));
        jPanel35.setPreferredSize(new java.awt.Dimension(150, 240));
        jPanel35.setLayout(new java.awt.GridBagLayout());

        jScrollPane2mer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "2-Mer", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jScrollPane2mer.setMaximumSize(new java.awt.Dimension(240, 210));
        jScrollPane2mer.setMinimumSize(new java.awt.Dimension(240, 210));
        jScrollPane2mer.setPreferredSize(new java.awt.Dimension(240, 210));

        jList2mer.setSelectedIndex(0);
        jScrollPane2mer.setViewportView(jList2mer);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel35.add(jScrollPane2mer, gridBagConstraints);

        jScrollPane3mer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "3-Mer", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jScrollPane3mer.setMaximumSize(new java.awt.Dimension(240, 210));
        jScrollPane3mer.setMinimumSize(new java.awt.Dimension(240, 210));
        jScrollPane3mer.setPreferredSize(new java.awt.Dimension(240, 210));

        jList3mer.setSelectedIndex(0);
        jScrollPane3mer.setViewportView(jList3mer);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel35.add(jScrollPane3mer, gridBagConstraints);

        kmerPanel.add(jPanel35, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addTab("K-mer", kmerPanel);

        laiPanel.setDoubleBuffered(false);
        laiPanel.setMaximumSize(new java.awt.Dimension(500, 280));
        laiPanel.setMinimumSize(new java.awt.Dimension(500, 280));
        laiPanel.setPreferredSize(new java.awt.Dimension(500, 280));
        laiPanel.setLayout(new java.awt.BorderLayout());

        jPanel28.setMaximumSize(new java.awt.Dimension(510, 200));
        jPanel28.setMinimumSize(new java.awt.Dimension(510, 200));
        jPanel28.setPreferredSize(new java.awt.Dimension(510, 200));
        jPanel28.setLayout(new java.awt.GridBagLayout());

        cb_aaLevel.setText("Amino acid-level indices ");
        cb_aaLevel.setMaximumSize(new java.awt.Dimension(180, 23));
        cb_aaLevel.setMinimumSize(new java.awt.Dimension(180, 23));
        cb_aaLevel.setPreferredSize(new java.awt.Dimension(180, 23));
        cb_aaLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_aaLevelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel28.add(cb_aaLevel, gridBagConstraints);

        jPanel30.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Window Size", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel30.setMaximumSize(new java.awt.Dimension(100, 50));
        jPanel30.setMinimumSize(new java.awt.Dimension(100, 50));
        jPanel30.setPreferredSize(new java.awt.Dimension(100, 50));

        spinnerWindowSize.setModel(new javax.swing.SpinnerNumberModel(5, 0, 10, 1));
        jPanel30.add(spinnerWindowSize);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel28.add(jPanel30, gridBagConstraints);

        jPanel31.setMaximumSize(new java.awt.Dimension(190, 50));
        jPanel31.setMinimumSize(new java.awt.Dimension(190, 50));
        jPanel31.setPreferredSize(new java.awt.Dimension(190, 50));
        jPanel31.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel28.add(jPanel31, gridBagConstraints);

        laiPanel.add(jPanel28, java.awt.BorderLayout.CENTER);

        jPanel29.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel29.setPreferredSize(new java.awt.Dimension(2, 200));
        jPanel29.setLayout(new java.awt.GridBagLayout());
        laiPanel.add(jPanel29, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("LAI-Output", laiPanel);

        motifPanel.setDoubleBuffered(false);
        motifPanel.setMaximumSize(new java.awt.Dimension(500, 280));
        motifPanel.setMinimumSize(new java.awt.Dimension(500, 280));
        motifPanel.setPreferredSize(new java.awt.Dimension(500, 280));
        motifPanel.setLayout(new java.awt.BorderLayout());

        jPanel36.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel36.setPreferredSize(new java.awt.Dimension(2, 40));
        jPanel36.setLayout(new java.awt.GridBagLayout());

        lb_configurations_motifs.setText("0 configurations");
        lb_configurations_motifs.setMaximumSize(new java.awt.Dimension(100, 16));
        lb_configurations_motifs.setMinimumSize(new java.awt.Dimension(100, 16));
        lb_configurations_motifs.setPreferredSize(new java.awt.Dimension(100, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel36.add(lb_configurations_motifs, gridBagConstraints);

        jButton6.setText("View");
        jButton6.setToolTipText("Shows list of K-Mers");
        jButton6.setMaximumSize(new java.awt.Dimension(95, 27));
        jButton6.setMinimumSize(new java.awt.Dimension(95, 27));
        jButton6.setPreferredSize(new java.awt.Dimension(95, 27));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel36.add(jButton6, gridBagConstraints);

        button_rm_motif.setText("Remove");
        button_rm_motif.setToolTipText("Clear all selections and empty the list of K-Mers");
        button_rm_motif.setMaximumSize(new java.awt.Dimension(95, 27));
        button_rm_motif.setMinimumSize(new java.awt.Dimension(95, 27));
        button_rm_motif.setPreferredSize(new java.awt.Dimension(95, 27));
        button_rm_motif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_rm_motifActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel36.add(button_rm_motif, gridBagConstraints);

        b_add_motif.setText("Add");
        b_add_motif.setToolTipText("Adds the selected K-Mers");
        b_add_motif.setMaximumSize(new java.awt.Dimension(95, 27));
        b_add_motif.setMinimumSize(new java.awt.Dimension(95, 27));
        b_add_motif.setPreferredSize(new java.awt.Dimension(95, 27));
        b_add_motif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_add_motifActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel36.add(b_add_motif, gridBagConstraints);

        button_defaultMotifs.setText("Default");
        button_defaultMotifs.setToolTipText("Adds the default list of K-Mers");
        button_defaultMotifs.setMaximumSize(new java.awt.Dimension(95, 27));
        button_defaultMotifs.setMinimumSize(new java.awt.Dimension(95, 27));
        button_defaultMotifs.setPreferredSize(new java.awt.Dimension(95, 27));
        button_defaultMotifs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_defaultMotifsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel36.add(button_defaultMotifs, gridBagConstraints);

        motifPanel.add(jPanel36, java.awt.BorderLayout.SOUTH);

        jPanel37.setMaximumSize(new java.awt.Dimension(150, 240));
        jPanel37.setMinimumSize(new java.awt.Dimension(150, 240));
        jPanel37.setPreferredSize(new java.awt.Dimension(150, 240));
        jPanel37.setLayout(new java.awt.GridBagLayout());

        jScrollPane2mer1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Base groups", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jScrollPane2mer1.setMaximumSize(new java.awt.Dimension(240, 210));
        jScrollPane2mer1.setMinimumSize(new java.awt.Dimension(240, 210));
        jScrollPane2mer1.setPreferredSize(new java.awt.Dimension(240, 210));

        jList_basegroups.setSelectedIndex(0);
        jScrollPane2mer1.setViewportView(jList_basegroups);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel37.add(jScrollPane2mer1, gridBagConstraints);

        jPanel4.setPreferredSize(new java.awt.Dimension(240, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel37.add(jPanel4, gridBagConstraints);

        motifPanel.add(jPanel37, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addTab("Motif", motifPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        jPanel16.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel16.setMaximumSize(new java.awt.Dimension(520, 35));
        jPanel16.setMinimumSize(new java.awt.Dimension(520, 35));
        jPanel16.setPreferredSize(new java.awt.Dimension(520, 35));
        jPanel16.setRequestFocusEnabled(false);
        jPanel16.setLayout(new java.awt.GridBagLayout());

        b_check_all.setText("Check All");
        b_check_all.setMaximumSize(new java.awt.Dimension(115, 27));
        b_check_all.setMinimumSize(new java.awt.Dimension(115, 27));
        b_check_all.setPreferredSize(new java.awt.Dimension(115, 27));
        b_check_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_check_allActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel16.add(b_check_all, gridBagConstraints);

        b_uncheck_all.setText("Uncheck All");
        b_uncheck_all.setMaximumSize(new java.awt.Dimension(115, 27));
        b_uncheck_all.setMinimumSize(new java.awt.Dimension(115, 27));
        b_uncheck_all.setPreferredSize(new java.awt.Dimension(115, 27));
        b_uncheck_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_uncheck_allActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel16.add(b_uncheck_all, gridBagConstraints);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/panelhelp.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.setMaximumSize(new java.awt.Dimension(28, 27));
        jButton1.setMinimumSize(new java.awt.Dimension(28, 27));
        jButton1.setPreferredSize(new java.awt.Dimension(28, 27));
        jButton1.addActionListener( Util.openFile( this, "Local.pdf" ) );
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 70, 0, 0);
        jPanel16.add(jButton1, gridBagConstraints);

        b_ok.setText("Ok");
        b_ok.setMaximumSize(new java.awt.Dimension(115, 27));
        b_ok.setMinimumSize(new java.awt.Dimension(115, 27));
        b_ok.setPreferredSize(new java.awt.Dimension(115, 27));
        b_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_okActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 70, 0, 0);
        jPanel16.add(b_ok, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel16, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void b_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_okActionPerformed

        list_Groups.clear();

        //<editor-fold defaultstate="collapsed" desc="Chemical/physical groups">
        if (cb_apolar.isSelected()) {
            list_Groups.add("apolar");
        }
        if (cb_polar_pos_charged.isSelected()) {
            list_Groups.add("polar_positively_charged");
        }
        if (cb_polar_neg_charged.isSelected()) {
            list_Groups.add("polar_negatively_charged");
        }
        if (cb_polar_uncharged.isSelected()) {
            list_Groups.add("polar_uncharged");
        }
        if (cb_aromatic.isSelected()) {
            list_Groups.add("aromatic");
        }
        if (cb_aliphatic.isSelected()) {
            list_Groups.add("aliphatic");
        }
        if (cb_unfolding.isSelected()) {
            list_Groups.add("unfolding");
        }
        if (cb_alpha_helix_favoring.isSelected()) {
            list_Groups.add("alpha_helix_favoring");
        }
        if (cb_beta_sheet_favoring.isSelected()) {
            list_Groups.add("beta_sheet_favoring");
        }
        if (cb_beta_turn_favoring.isSelected()) {
            list_Groups.add("beta_turn_favoring");
        }
        // </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="R group-based groups">
        if (cb_alanine.isSelected()) {
            list_Groups.add("alanine");
        }
        if (cb_arginine.isSelected()) {
            list_Groups.add("arginine");
        }
        if (cb_asparagine.isSelected()) {
            list_Groups.add("asparagine");
        }

        if (cb_aspartate.isSelected()) {
            list_Groups.add("aspartate");
        }
        if (cb_cysteine.isSelected()) {
            list_Groups.add("cysteine");
        }
        if (cb_glutamine.isSelected()) {
            list_Groups.add("glutamine");
        }
        if (cb_glutamate.isSelected()) {
            list_Groups.add("glutamate");
        }
        if (cb_glycine.isSelected()) {
            list_Groups.add("glycine");
        }
        if (cb_methionine.isSelected()) {
            list_Groups.add("methionine");
        }
        if (cb_leucine.isSelected()) {
            list_Groups.add("leucine");
        }
        if (cb_lysine.isSelected()) {
            list_Groups.add("lysine");
        }
        if (cb_isoleucine.isSelected()) {
            list_Groups.add("isoleucine");
        }
        if (cb_phenylalanine.isSelected()) {
            list_Groups.add("phenylalanine");
        }

        if (cb_proline.isSelected()) {
            list_Groups.add("proline");
        }
        if (cb_serine.isSelected()) {
            list_Groups.add("serine");
        }
        if (cb_threonine.isSelected()) {
            list_Groups.add("threonine");
        }
        if (cb_tryptophan.isSelected()) {
            list_Groups.add("tryptophan");
        }
        if (cb_histidine.isSelected()) {
            list_Groups.add("histidine");
        }
        if (cb_tyrosine.isSelected()) {
            list_Groups.add("tyrosine");
        }
        if (cb_valine.isSelected()) {
            list_Groups.add("valine");
        }
        // </editor-fold>

        // <editor-fold defaultstate="collapsed" desc="K-Mers">
        list_Groups.addAll(list_Kmers);
        lb_configurations.setText(currentKmers + " configurations");
        // </editor-fold>

        setVisible(false);
    }//GEN-LAST:event_b_okActionPerformed

    private void b_uncheck_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_uncheck_allActionPerformed
        currentSideChainSecondaryStructure = 0;
        currentAminoAcidLocals = 0;
        currentKmers = 0;
        lb_configurations.setText(currentKmers + " configurations");
        groupsToggleButton.setSelected(false);
        groupsToggleButton.setText("Check");
        aminoAcidGroupsToggleButton.setSelected(false);
        aminoAcidGroupsToggleButton.setText("Check");
        list_Groups.clear();
        list_Kmers.clear();
        unselectAllAminoAcidGroups();
        unselectAllGroups();
        unselectAllKMers();
    }//GEN-LAST:event_b_uncheck_allActionPerformed

    private void b_check_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_check_allActionPerformed
        currentSideChainSecondaryStructure = TOTAL_SIDE_CHAIN_SECONDARY_STRUCTURE_LOCALS;
        currentAminoAcidLocals = TOTAL_AMINOACIDS_LOCALS;
        currentKmers = TOTAL_AMINOACIDS_KMERS;
        lb_configurations.setText(currentKmers + " configurations");
        groupsToggleButton.setSelected(true);
        groupsToggleButton.setText("Uncheck");
        aminoAcidGroupsToggleButton.setSelected(true);
        aminoAcidGroupsToggleButton.setText("Uncheck");
        selectAllAminoAcidGroups();
        selectAllGroups();
        selectAllKMers();
    }//GEN-LAST:event_b_check_allActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cb_aaLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_aaLevelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_aaLevelActionPerformed

    private void button_defaultKmersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_defaultKmersActionPerformed
        setDefaultKmerList();
        kMerListDialog.updateList(list_Kmers);
        currentKmers = list_Kmers.size();
        lb_configurations.setText(currentKmers + " configurations");
    }//GEN-LAST:event_button_defaultKmersActionPerformed

    private void b_add_kmerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_add_kmerActionPerformed
        list_Kmers.clear();
        currentKmers = 0;

        if (jList2mer.getSelectedIndex() != -1) {
            List<String> two_mers_list = jList2mer.getSelectedValuesList();
            list_Kmers.addAll(two_mers_list);
            currentKmers += two_mers_list.size();
        }
        if (jList3mer.getSelectedIndex() != -1) {
            List<String> three_mers_list = jList3mer.getSelectedValuesList();
            list_Kmers.addAll(three_mers_list);
            currentKmers += three_mers_list.size();
        }
        lb_configurations.setText(currentKmers + " configurations");
    }//GEN-LAST:event_b_add_kmerActionPerformed

    private void button_rm_KmerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_rm_KmerActionPerformed
        list_Kmers.clear();
        currentKmers = 0;
        jList2mer.clearSelection();
        jList3mer.clearSelection();
        lb_configurations.setText(currentKmers + " configurations");
    }//GEN-LAST:event_button_rm_KmerActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        kMerListDialog.updateList(list_Kmers);
        kMerListDialog.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void aminoAcidGroupsToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aminoAcidGroupsToggleButtonActionPerformed

        if (aminoAcidGroupsToggleButton.isSelected()) {
            currentAminoAcidLocals = TOTAL_AMINOACIDS_LOCALS;
            selectAllAminoAcidGroups();
            aminoAcidGroupsToggleButton.setText("Uncheck");
        } else {
            currentAminoAcidLocals = 0;
            unselectAllAminoAcidGroups();
            aminoAcidGroupsToggleButton.setText("Check");
        }
    }//GEN-LAST:event_aminoAcidGroupsToggleButtonActionPerformed

    private void cb_glycineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_glycineActionPerformed
        actionAminoAcidLocales(cb_glycine);
    }//GEN-LAST:event_cb_glycineActionPerformed

    private void cb_leucineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_leucineActionPerformed
        actionAminoAcidLocales(cb_leucine);
    }//GEN-LAST:event_cb_leucineActionPerformed

    private void cb_valineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_valineActionPerformed
        actionAminoAcidLocales(cb_valine);
    }//GEN-LAST:event_cb_valineActionPerformed

    private void cb_isoleucineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_isoleucineActionPerformed
        actionAminoAcidLocales(cb_isoleucine);
    }//GEN-LAST:event_cb_isoleucineActionPerformed

    private void cb_tyrosineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_tyrosineActionPerformed
        actionAminoAcidLocales(cb_tyrosine);
    }//GEN-LAST:event_cb_tyrosineActionPerformed

    private void cb_histidineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_histidineActionPerformed
        actionAminoAcidLocales(cb_histidine);
    }//GEN-LAST:event_cb_histidineActionPerformed

    private void cb_tryptophanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_tryptophanActionPerformed
        actionAminoAcidLocales(cb_tryptophan);
    }//GEN-LAST:event_cb_tryptophanActionPerformed

    private void cb_threonineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_threonineActionPerformed
        actionAminoAcidLocales(cb_threonine);
    }//GEN-LAST:event_cb_threonineActionPerformed

    private void cb_cysteineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_cysteineActionPerformed
        actionAminoAcidLocales(cb_cysteine);
    }//GEN-LAST:event_cb_cysteineActionPerformed

    private void cb_aspartateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_aspartateActionPerformed
        actionAminoAcidLocales(cb_aspartate);
    }//GEN-LAST:event_cb_aspartateActionPerformed

    private void cb_prolineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_prolineActionPerformed
        actionAminoAcidLocales(cb_proline);
    }//GEN-LAST:event_cb_prolineActionPerformed

    private void cb_serineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_serineActionPerformed
        actionAminoAcidLocales(cb_serine);
    }//GEN-LAST:event_cb_serineActionPerformed

    private void cb_glutamineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_glutamineActionPerformed
        actionAminoAcidLocales(cb_glutamine);
    }//GEN-LAST:event_cb_glutamineActionPerformed

    private void cb_phenylalanineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_phenylalanineActionPerformed
        actionAminoAcidLocales(cb_phenylalanine);
    }//GEN-LAST:event_cb_phenylalanineActionPerformed

    private void cb_methionineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_methionineActionPerformed
        actionAminoAcidLocales(cb_methionine);
    }//GEN-LAST:event_cb_methionineActionPerformed

    private void cb_lysineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_lysineActionPerformed
        actionAminoAcidLocales(cb_lysine);
    }//GEN-LAST:event_cb_lysineActionPerformed

    private void cb_glutamateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_glutamateActionPerformed
        actionAminoAcidLocales(cb_glutamate);
    }//GEN-LAST:event_cb_glutamateActionPerformed

    private void cb_asparagineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_asparagineActionPerformed
        actionAminoAcidLocales(cb_asparagine);
    }//GEN-LAST:event_cb_asparagineActionPerformed

    private void cb_arginineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_arginineActionPerformed
        actionAminoAcidLocales(cb_arginine);
    }//GEN-LAST:event_cb_arginineActionPerformed

    private void cb_alanineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_alanineActionPerformed
        actionAminoAcidLocales(cb_alanine);
    }//GEN-LAST:event_cb_alanineActionPerformed

    private void groupsToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupsToggleButtonActionPerformed

        if (groupsToggleButton.isSelected()) {
            currentSideChainSecondaryStructure = TOTAL_SIDE_CHAIN_SECONDARY_STRUCTURE_LOCALS;

            selectAllGroups();

            groupsToggleButton.setText("Uncheck");
        } else {
            currentSideChainSecondaryStructure = 0;

            unselectAllGroups();

            groupsToggleButton.setText("Check");
        }
    }//GEN-LAST:event_groupsToggleButtonActionPerformed

    private void cb_polar_unchargedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_polar_unchargedActionPerformed
        actionGroupsLocales(cb_polar_uncharged);
    }//GEN-LAST:event_cb_polar_unchargedActionPerformed

    private void cb_beta_turn_favoringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_beta_turn_favoringActionPerformed
        actionGroupsLocales(cb_beta_turn_favoring);
    }//GEN-LAST:event_cb_beta_turn_favoringActionPerformed

    private void cb_unfoldingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_unfoldingActionPerformed
        actionGroupsLocales(cb_unfolding);
    }//GEN-LAST:event_cb_unfoldingActionPerformed

    private void cb_aliphaticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_aliphaticActionPerformed
        actionGroupsLocales(cb_aliphatic);
    }//GEN-LAST:event_cb_aliphaticActionPerformed

    private void cb_polar_neg_chargedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_polar_neg_chargedActionPerformed
        actionGroupsLocales(cb_polar_neg_charged);
    }//GEN-LAST:event_cb_polar_neg_chargedActionPerformed

    private void cb_polar_pos_chargedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_polar_pos_chargedActionPerformed
        actionGroupsLocales(cb_polar_pos_charged);
    }//GEN-LAST:event_cb_polar_pos_chargedActionPerformed

    private void cb_beta_sheet_favoringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_beta_sheet_favoringActionPerformed

        actionGroupsLocales(cb_beta_sheet_favoring);
    }//GEN-LAST:event_cb_beta_sheet_favoringActionPerformed

    private void cb_apolarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_apolarActionPerformed

        actionGroupsLocales(cb_apolar);
    }//GEN-LAST:event_cb_apolarActionPerformed

    private void cb_alpha_helix_favoringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_alpha_helix_favoringActionPerformed

        actionGroupsLocales(cb_alpha_helix_favoring);
    }//GEN-LAST:event_cb_alpha_helix_favoringActionPerformed

    private void cb_aromaticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_aromaticActionPerformed

        actionGroupsLocales(cb_aromatic);
    }//GEN-LAST:event_cb_aromaticActionPerformed

    private void button_defaultMotifsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_defaultMotifsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_button_defaultMotifsActionPerformed

    private void b_add_motifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_add_motifActionPerformed
        if (jList_basegroups.getSelectedIndex() != -1 && jList_basegroups.getSelectedIndices().length >= 2) {
            String motif = "";
            for (int i = 0; i < currentMotif.size(); i++) {
                motif += currentMotif.get(i) + "-";
            }

            motif += currentMotif.get(currentMotif.size() - 1);

            list_Motifs.add(motif);

            currentMotifs++;

            currentMotif.clear();
        } else if (jList_basegroups.getSelectedIndices().length < 2) {
            JOptionPane.showMessageDialog(this, "You must select at least two groups.",
                "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_b_add_motifActionPerformed

    private void button_rm_motifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_rm_motifActionPerformed
        list_Motifs.clear();
        currentMotifs = 0;
        jList_basegroups.clearSelection();
        lb_configurations_motifs.setText(currentMotifs + " configurations");
    }//GEN-LAST:event_button_rm_motifActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        motifListDialog.updateList(list_Motifs);
        motifListDialog.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    public void clearAllSelections() {
        b_uncheck_all.doClick();
    }

    private void actionGroupsLocales(JCheckBox cb) {
        if (!cb.isSelected()) {
            currentSideChainSecondaryStructure--;
            groupsToggleButton.setSelected(false);
            groupsToggleButton.setText("Check");
        } else {
            currentSideChainSecondaryStructure++;
            if (currentSideChainSecondaryStructure == TOTAL_SIDE_CHAIN_SECONDARY_STRUCTURE_LOCALS) {
                groupsToggleButton.setSelected(true);
                groupsToggleButton.setText("Uncheck");
            }
        }
    }

    private void actionAminoAcidLocales(JCheckBox cb) {
        if (!cb.isSelected()) {
            currentAminoAcidLocals--;
            aminoAcidGroupsToggleButton.setSelected(false);
            aminoAcidGroupsToggleButton.setText("Check");
        } else {
            currentAminoAcidLocals++;
            if (currentAminoAcidLocals == TOTAL_AMINOACIDS_LOCALS) {
                aminoAcidGroupsToggleButton.setSelected(true);
                aminoAcidGroupsToggleButton.setText("Uncheck");
            }
        }
    }

    private void selectAllAminoAcidGroups() {
        cb_alanine.setSelected(true);
        cb_arginine.setSelected(true);
        cb_asparagine.setSelected(true);
        cb_aspartate.setSelected(true);
        cb_cysteine.setSelected(true);
        cb_glutamine.setSelected(true);
        cb_glutamate.setSelected(true);
        cb_glycine.setSelected(true);
        cb_methionine.setSelected(true);
        cb_leucine.setSelected(true);
        cb_lysine.setSelected(true);
        cb_isoleucine.setSelected(true);
        cb_phenylalanine.setSelected(true);
        cb_proline.setSelected(true);
        cb_serine.setSelected(true);
        cb_threonine.setSelected(true);
        cb_tryptophan.setSelected(true);
        cb_histidine.setSelected(true);
        cb_tyrosine.setSelected(true);
        cb_valine.setSelected(true);
        list_Groups.add("alanine");
        list_Groups.add("arginine");
        list_Groups.add("asparagine");
        list_Groups.add("aspartate");
        list_Groups.add("cysteine");
        list_Groups.add("glutamate");
        list_Groups.add("glutamine");
        list_Groups.add("glycine");
        list_Groups.add("histidine");
        list_Groups.add("isoleucine");
        list_Groups.add("leucine");
        list_Groups.add("lysine");
        list_Groups.add("methionine");
        list_Groups.add("phenylalanine");
        list_Groups.add("proline");
        list_Groups.add("serine");
        list_Groups.add("threonine");
        list_Groups.add("tryptophan");
        list_Groups.add("tyrosine");
        list_Groups.add("valine");
    }

    private void unselectAllAminoAcidGroups() {
        cb_alanine.setSelected(false);
        cb_arginine.setSelected(false);
        cb_asparagine.setSelected(false);
        cb_aspartate.setSelected(false);
        cb_cysteine.setSelected(false);
        cb_glutamine.setSelected(false);
        cb_glutamate.setSelected(false);
        cb_glycine.setSelected(false);
        cb_methionine.setSelected(false);
        cb_leucine.setSelected(false);
        cb_lysine.setSelected(false);
        cb_isoleucine.setSelected(false);
        cb_phenylalanine.setSelected(false);
        cb_proline.setSelected(false);
        cb_serine.setSelected(false);
        cb_threonine.setSelected(false);
        cb_tryptophan.setSelected(false);
        cb_histidine.setSelected(false);
        cb_tyrosine.setSelected(false);
        cb_valine.setSelected(false);
    }

    private void selectAllGroups() {
        cb_apolar.setSelected(true);
        cb_polar_pos_charged.setSelected(true);
        cb_polar_neg_charged.setSelected(true);
        cb_polar_uncharged.setSelected(true);
        cb_aromatic.setSelected(true);
        cb_aliphatic.setSelected(true);
        cb_unfolding.setSelected(true);
        cb_alpha_helix_favoring.setSelected(true);
        cb_beta_turn_favoring.setSelected(true);
        cb_beta_sheet_favoring.setSelected(true);

        list_Groups.add("apolar");
        list_Groups.add("polar_positively_charged");
        list_Groups.add("polar_negatively_charged");
        list_Groups.add("polar_uncharged");
        list_Groups.add("aromatic");
        list_Groups.add("aliphatic");
        list_Groups.add("unfolding");
        list_Groups.add("alpha_helix_favoring");
        list_Groups.add("beta_sheet_favoring");
        list_Groups.add("beta_turn_favoring");
    }

    private void unselectAllGroups() {
        list_Groups.clear();
        cb_apolar.setSelected(false);
        cb_polar_pos_charged.setSelected(false);
        cb_polar_neg_charged.setSelected(false);
        cb_aromatic.setSelected(false);
        cb_aliphatic.setSelected(false);
        cb_unfolding.setSelected(false);
        cb_alpha_helix_favoring.setSelected(false);
        cb_beta_turn_favoring.setSelected(false);
        cb_beta_sheet_favoring.setSelected(false);
        cb_polar_uncharged.setSelected(false);
    }

    private void selectAllKMers() {
        for (int i = 0; i < jList2mer.getModel().getSize(); i++) {
            list_Kmers.add(jList2mer.getModel().getElementAt(i));
        }

        for (int i = 0; i < jList3mer.getModel().getSize(); i++) {
            list_Kmers.add(jList3mer.getModel().getElementAt(i));
        }
    }

    private void unselectAllKMers() {
        button_rm_Kmer.doClick();
    }

    //add default kmer list
    void setDefaultKmerList() {
//            list_Kmers.add("glycine-alanine");
//            list_Kmers.add("SER-ASP");
//            list_Kmers.add("GLY-GLU");
//            list_Kmers.add("GLU-GLY");
//            list_Kmers.add("THR-GLY");
//            list_Kmers.add("ALA-ILE");
//            list_Kmers.add("ASP-LEU");
//            list_Kmers.add("ASP-LYS");
//            list_Kmers.add("SER-LYS");
//            list_Kmers.add("TYR-SER");
//            list_Kmers.add("VAL-THR");
//            list_Kmers.add("ALA-VAL");
//            list_Kmers.add("ASN-VAL");
//            list_Kmers.add("ASP-VAL");
//            list_Kmers.add("ILE-VAL");
    }

    final void fillKMersList() {
        List<String> monomers = new LinkedList<>();

        monomers.add("Alanine");
        monomers.add("Arginine");
        monomers.add("Asparagine");
        monomers.add("Aspartate");
        monomers.add("Cysteine");
        monomers.add("Glutamate");
        monomers.add("Glutamine");
        monomers.add("Glycine");
        monomers.add("Histidine");
        monomers.add("Isoleucine");
        monomers.add("Leucine");
        monomers.add("Lysine");
        monomers.add("Methionine");
        monomers.add("Phenylalanine");
        monomers.add("Proline");
        monomers.add("Serine");
        monomers.add("Threonine");
        monomers.add("Tryptophan");
        monomers.add("Tyrosine");
        monomers.add("Valine");

        DefaultListModel md = new DefaultListModel();
        DefaultListModel mt = new DefaultListModel();
        monomers.forEach((mer1) -> {
            monomers.forEach((mer2) -> {
                String dimer = mer1 + "-" + mer2;
                md.addElement(dimer);

                monomers.forEach((mer3) -> {
                    mt.addElement(dimer + "-" + mer3);
                });
            });
        });

        jList2mer.setModel(md);
        jList3mer.setModel(mt);
    }

    final void fillBaseGroupList() {
        List<String> monomers = new LinkedList<>();

        monomers.add("apolar");
        monomers.add("polar_positively_charged");
        monomers.add("polar_negatively_charged");
        monomers.add("polar_uncharged");
        monomers.add("aromatic");
        monomers.add("aliphatic");
        monomers.add("unfolding");
        monomers.add("alpha_helix_favoring");
        monomers.add("beta_sheet_favoring");
        monomers.add("beta_turn_favoring");

        monomers.add("Alanine");
        monomers.add("Arginine");
        monomers.add("Asparagine");
        monomers.add("Aspartate");
        monomers.add("Cysteine");
        monomers.add("Glutamate");
        monomers.add("Glutamine");
        monomers.add("Glycine");
        monomers.add("Histidine");
        monomers.add("Isoleucine");
        monomers.add("Leucine");
        monomers.add("Lysine");
        monomers.add("Methionine");
        monomers.add("Phenylalanine");
        monomers.add("Proline");
        monomers.add("Serine");
        monomers.add("Threonine");
        monomers.add("Tryptophan");
        monomers.add("Tyrosine");
        monomers.add("Valine");

        DefaultListModel lm = new DefaultListModel();

        monomers.forEach((mer1) -> {
            lm.addElement(mer1);
        });

        jList_basegroups.setModel(lm);
    }

    void readConfiguration(Element root, IFormPanel ui) {
        clearAllSelections();

        boolean haveLocals = false;

        Element e = (Element) root.getFirstChildElement("groups");

        int n = e.getChildCount();

        for (int i = 0; i < n; i++) {
            if (e.getChild(i) instanceof Element) {
                String name = ((Element) e.getChild(i)).getLocalName();

                if (name.contains("-")) {
                    String[] loc = name.split("-");

                    if (isLocal(loc)) {
                        haveLocals = true;
                    }
                } else {
                    if (isLocal(name)) {
                        haveLocals = true;
                    }
                }

                if (name.equalsIgnoreCase("total")) {
                    ui.setPanelAttribute("total");
                }

                setGroupPanelAttribute(name);

//                if (name.equalsIgnoreCase("aaLevel")) {
//                    Element el = (Element) e.getChild(i);
//                    String status = el.getAttributeValue("status");
//
//                    if (status.equalsIgnoreCase("ON")) {
//                        cb_aaLevel.setSelected(true);
//
//                        int windowSize = Integer.parseInt(el.getAttribute("windowSize").getValue());
//
//                        spinnerWindowSize.setValue(windowSize);
//
//                        haveLocals = true;
//                    } else {
//                        cb_aaLevel.setSelected(false);
//                    }
//                }
            }
        }

        if (haveLocals) {
            ui.setPanelAttribute("local");

            generate();
        }
    }

    boolean isLocal(String name) {
        return (name.equalsIgnoreCase("apolar") || name.equalsIgnoreCase("polar_positively_charged")
                || name.equalsIgnoreCase("polar_negatively_charged") || name.equalsIgnoreCase("polar_uncharged")
                || name.equalsIgnoreCase("aromatic") || name.equalsIgnoreCase("aliphatic")
                || name.equalsIgnoreCase("unfolding") || name.equalsIgnoreCase("alpha_helix_favoring")
                || name.equalsIgnoreCase("beta_sheet_favoring") || name.equalsIgnoreCase("beta_turn_favoring")
                // check for amino-acid locales
                || name.equalsIgnoreCase("alanine") || name.equalsIgnoreCase("arginine")
                || name.equalsIgnoreCase("asparagine") || name.equalsIgnoreCase("aspartate")
                || name.equalsIgnoreCase("cysteine") || name.equalsIgnoreCase("glutamate")
                || name.equalsIgnoreCase("glutamine") || name.equalsIgnoreCase("glycine")
                || name.equalsIgnoreCase("histidine") || name.equalsIgnoreCase("isoleucine")
                || name.equalsIgnoreCase("leucine") || name.equalsIgnoreCase("lysine")
                || name.equalsIgnoreCase("methionine") || name.equalsIgnoreCase("phenylalanine")
                || name.equalsIgnoreCase("proline") || name.equalsIgnoreCase("serine")
                || name.equalsIgnoreCase("threonine") || name.equalsIgnoreCase("tryptophan")
                || name.equalsIgnoreCase("tyrosine") || name.equalsIgnoreCase("valine"));
    }

    boolean isLocal(String[] name) {
        for (String string : name) {
            if (!isLocal(string)) {
                return false;
            }
        }

        return true;
    }

    void saveConfiguration(boolean total, Element root) {
        Element groups = new Element("groups");

        if (total) {
            groups.appendChild(new Element("total"));
        }

        for (String group : list_Groups) {
            if (group.contains("-")) {
                String[] loc = group.split("-");
                String auxGroup = "";

                for (int i = 0; i < loc.length - 1; i++) {
                    auxGroup += loc[i] + "-";
                }

                auxGroup += loc[loc.length - 1];

                groups.appendChild(new Element(auxGroup.toLowerCase()));
            } else {
                groups.appendChild(new Element(group.toLowerCase()));
            }
        }

//        Element e = new Element("aaLevel");
//
//        if (cb_aaLevel.isSelected()) {
//            e.addAttribute(new Attribute("status", "ON"));
//
//            String windowSize = String.valueOf(spinnerWindowSize.getValue());
//
//            e.addAttribute(new Attribute("windowSize", windowSize));
//        } else {
//            e.addAttribute(new Attribute("status", "OFF"));
//        }
//
//        groups.appendChild(e);

        root.appendChild(groups);
    }

    private void setGroupPanelAttribute(String attribute) {
        if (attribute.contains("-")) {
            String[] loc = attribute.split("-");
            String out = "";

            for (int i = 0; i < loc.length - 1; i++) {
                out += Util.capitalize(LocalType.valueOf(loc[i]).toString()) + "-";
            }
            out += Util.capitalize(LocalType.valueOf(loc[loc.length - 1]).toString());

            list_Kmers.add(out);
            currentKmers++;

        } else {
            switch (attribute.toLowerCase()) {
                case "apolar":
                    cb_apolar.setSelected(true);
                    break;
                case "polar_positively_charged":
                    cb_polar_pos_charged.setSelected(true);
                    break;
                case "polar_negatively_charged":
                    cb_polar_neg_charged.setSelected(true);
                    break;
                case "polar_uncharged":
                    cb_polar_uncharged.setSelected(true);
                    break;
                case "aromatic":
                    cb_aromatic.setSelected(true);
                    break;
                case "aliphatic":
                    cb_aliphatic.setSelected(true);
                    break;
                case "unfolding":
                    cb_unfolding.setSelected(true);
                    break;
                case "alpha_helix_favoring":
                    cb_alpha_helix_favoring.setSelected(true);
                    break;
                case "beta_sheet_favoring":
                    cb_beta_sheet_favoring.setSelected(true);
                    break;
                case "beta_turn_favoring":
                    cb_beta_turn_favoring.setSelected(true);
                    break;
                //aminoacid-based groups

                /*
             alanine,arginine,asparagine,aspartate,cysteine,glutamate,
             glutamine,glycine,histidine,isoleucine,leucine,lysine,methionine,phenylalanine,
             proline,serine,threonine,tryptophan,tyrosine,valine
                 */
                case "alanine":
                    cb_alanine.setSelected(true);
                    break;
                case "arginine":
                    cb_arginine.setSelected(true);
                    break;
                case "asparagine":
                    cb_asparagine.setSelected(true);
                    break;
                case "aspartate":
                    cb_aspartate.setSelected(true);
                    break;
                case "cysteine":
                    cb_cysteine.setSelected(true);
                    break;
                case "glutamate":
                    cb_glutamate.setSelected(true);
                    break;
                case "glutamine":
                    cb_glutamine.setSelected(true);
                    break;
                case "glycine":
                    cb_glycine.setSelected(true);
                    break;
                case "histidine":
                    cb_histidine.setSelected(true);
                    break;
                case "isoleucine":
                    cb_isoleucine.setSelected(true);
                    break;
                case "leucine":
                    cb_leucine.setSelected(true);
                    break;
                case "lysine":
                    cb_lysine.setSelected(true);
                    break;
                case "methionine":
                    cb_methionine.setSelected(true);
                    break;
                case "phenylalanine":
                    cb_phenylalanine.setSelected(true);
                    break;
                case "proline":
                    cb_proline.setSelected(true);
                    break;
                case "serine":
                    cb_serine.setSelected(true);
                    break;
                case "threonine":
                    cb_threonine.setSelected(true);
                    break;
                case "tryptophan":
                    cb_tryptophan.setSelected(true);
                    break;
                case "tyrosine":
                    cb_tyrosine.setSelected(true);
                    break;
                case "valine":
                    cb_valine.setSelected(true);
                    break;
            }
        }
    }

    int[] extend_array(int[] array, int elem) {
        int[] extended_array = new int[array.length + 1];

        for (int i = 0; i < array.length; i++) {
            extended_array[i] = array[i];
        }

        extended_array[extended_array.length - 1] = elem;

        return extended_array;
    }

    public boolean isAALevel() {
        return cb_aaLevel.isSelected();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton aminoAcidGroupsToggleButton;
    private javax.swing.JButton b_add_kmer;
    private javax.swing.JButton b_add_motif;
    private javax.swing.JButton b_check_all;
    private javax.swing.JButton b_ok;
    private javax.swing.JButton b_uncheck_all;
    private javax.swing.JButton button_defaultKmers;
    private javax.swing.JButton button_defaultMotifs;
    private javax.swing.JButton button_rm_Kmer;
    private javax.swing.JButton button_rm_motif;
    private javax.swing.JCheckBox cb_aaLevel;
    private javax.swing.JCheckBox cb_alanine;
    private javax.swing.JCheckBox cb_aliphatic;
    private javax.swing.JCheckBox cb_alpha_helix_favoring;
    private javax.swing.JCheckBox cb_apolar;
    private javax.swing.JCheckBox cb_arginine;
    private javax.swing.JCheckBox cb_aromatic;
    private javax.swing.JCheckBox cb_asparagine;
    private javax.swing.JCheckBox cb_aspartate;
    private javax.swing.JCheckBox cb_beta_sheet_favoring;
    private javax.swing.JCheckBox cb_beta_turn_favoring;
    private javax.swing.JCheckBox cb_cysteine;
    private javax.swing.JCheckBox cb_glutamate;
    private javax.swing.JCheckBox cb_glutamine;
    private javax.swing.JCheckBox cb_glycine;
    private javax.swing.JCheckBox cb_histidine;
    private javax.swing.JCheckBox cb_isoleucine;
    private javax.swing.JCheckBox cb_leucine;
    private javax.swing.JCheckBox cb_lysine;
    private javax.swing.JCheckBox cb_methionine;
    private javax.swing.JCheckBox cb_phenylalanine;
    private javax.swing.JCheckBox cb_polar_neg_charged;
    private javax.swing.JCheckBox cb_polar_pos_charged;
    private javax.swing.JCheckBox cb_polar_uncharged;
    private javax.swing.JCheckBox cb_proline;
    private javax.swing.JCheckBox cb_serine;
    private javax.swing.JCheckBox cb_threonine;
    private javax.swing.JCheckBox cb_tryptophan;
    private javax.swing.JCheckBox cb_tyrosine;
    private javax.swing.JCheckBox cb_unfolding;
    private javax.swing.JCheckBox cb_valine;
    private javax.swing.JToggleButton groupsToggleButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JList<String> jList2mer;
    private javax.swing.JList<String> jList3mer;
    private javax.swing.JList<String> jList_basegroups;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2mer;
    private javax.swing.JScrollPane jScrollPane2mer1;
    private javax.swing.JScrollPane jScrollPane3mer;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel kmerPanel;
    private javax.swing.JPanel laiPanel;
    private javax.swing.JLabel lb_configurations;
    private javax.swing.JLabel lb_configurations_motifs;
    private javax.swing.JPanel motifPanel;
    private javax.swing.JSpinner spinnerWindowSize;
    // End of variables declaration//GEN-END:variables

    void generate() {
        b_ok.doClick();
    }

    public static void main(String args[]) {

//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                GroupsDialog dialog = new GroupsDialog(new javax.swing.JFrame());
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//                    @Override
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
    }

    public int getWindowSize() {
        return (int) spinnerWindowSize.getValue();
    }

}
