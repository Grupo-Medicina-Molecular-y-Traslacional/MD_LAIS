/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tomocomd.camps.mdlais.gui.ui;

import camdbir.starpepfs.FeatureSelector;
import camdbir.starpepfs.alg.impl.FeatureComparator;
import camdbir.starpepfs.alg.impl.FeatureDiscretization;
import camdbir.starpepfs.alg.impl.FeatureSEFiltering;
import camdbir.starpepfs.model.Instance;
import camdbir.starpepfs.model.InstanceDescriptor;
import com.opencsv.CSVReader;
import util.GUIUtil;
import featureselection.FeatureSelectionMethodType;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author ERNESTO
 */
public class FeatureSelectionDialog extends javax.swing.JDialog {

    File[] inputFiles;

    File outputFolder;

    public FeatureSelectionMethodType rt;

    public String TITLE = "Feature Selection";

    /**
     * Creates new form FeatureSel
     */
    public FeatureSelectionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((screen.width / 2 - getSize().width / 2) - 38, screen.height / 2 - getSize().height / 2);
    }

    void deleteInputFiles() {
        if (inputFiles != null) {
            inputFiles = null;
        }
        tf_InputFiles.setText("");
    }

    public double getEntropyThreshold() {
        return Double.parseDouble(cmb_entropyThreshold.getSelectedItem().toString());
    }

    public double getCorrelationThreshold() {
        return Double.parseDouble(cmb_correlationThreshold.getSelectedItem().toString());
    }

    private boolean checkOptions()
    {
      if(cmb_bins.getSelectedItem().equals("User defined"))
      {
          try 
          {
              Integer.parseInt(txt_numBins.getText());              
          } catch (Exception e) 
          {
              GUIUtil.showMessage(this, "You must enter an integer positive value \n in the number of bins", TITLE, JOptionPane.ERROR_MESSAGE);
              return false;
          }            
      }
      
        if(rb_top.isSelected())
      {
          try 
          {
              Integer.parseInt(txt_top_feat.getText());
              
          } catch (Exception e) 
          {
              GUIUtil.showMessage(this, "You must enter an integer positive value \n in the number of features", TITLE, JOptionPane.ERROR_MESSAGE);
              return false;
          }            
      }
      
      return true;
    }

    public void blockDuringTask(boolean status) {
        inputPanel.setEnabled(status);
        tf_InputFiles.setEnabled(status);
        inputBrowseButton.setEnabled(status);

        outputPanel.setEnabled(status);
        tf_OutputFiles.setEnabled(status);
        outputBrowseButton.setEnabled(status);

        cb_stdentropy.setEnabled(status);
        cb_intercorrelation.setEnabled(status);
        cmb_entropyThreshold.setEnabled(status);
        cmb_correlationThreshold.setEnabled(status);
        
        if(cb_stdentropy.isSelected())
        {
           lb_num_bins.setEnabled(status);
           lb_entropy_threshold.setEnabled(status);
           cmb_bins.setEnabled(status);
           cmb_entropyThreshold.setEnabled(status);
        }
        
        if(cb_intercorrelation.isSelected())
        {
           lb_correl_coef.setEnabled(status);
           lb_redundancy_threshold.setEnabled(status);
           cmb_correlationThreshold.setEnabled(status);
           cmb_corr_measure.setEnabled(status);
        }
        
        runButton.setEnabled(status);
        cancelButton.setEnabled(status);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        inputPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tf_InputFiles = new javax.swing.JTextField();
        inputBrowseButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        outputPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        tf_OutputFiles = new javax.swing.JTextField();
        outputBrowseButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        cb_stdentropy = new javax.swing.JCheckBox();
        cmb_entropyThreshold = new javax.swing.JComboBox<>();
        cmb_bins = new javax.swing.JComboBox<>();
        lb_entropy_threshold = new javax.swing.JLabel();
        txt_numBins = new javax.swing.JTextField();
        lb_num_bins = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        runButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        cmb_corr_measure = new javax.swing.JComboBox<>();
        lb_redundancy_threshold = new javax.swing.JLabel();
        cb_intercorrelation = new javax.swing.JCheckBox();
        cmb_correlationThreshold = new javax.swing.JComboBox<>();
        lb_correl_coef = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        rb_top = new javax.swing.JRadioButton();
        rb_all = new javax.swing.JRadioButton();
        txt_top_feat = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(600, 300));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        inputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION)); // NOI18N
        inputPanel.setMaximumSize(new java.awt.Dimension(550, 80));
        inputPanel.setMinimumSize(new java.awt.Dimension(550, 80));
        inputPanel.setName(""); // NOI18N
        inputPanel.setPreferredSize(new java.awt.Dimension(550, 80));
        inputPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, -12, 0, 0);
        inputPanel.add(jLabel1, gridBagConstraints);

        tf_InputFiles.setEditable(false);
        tf_InputFiles.setMaximumSize(new java.awt.Dimension(400, 30));
        tf_InputFiles.setMinimumSize(new java.awt.Dimension(400, 30));
        tf_InputFiles.setPreferredSize(new java.awt.Dimension(400, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        inputPanel.add(tf_InputFiles, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(inputBrowseButton, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.inputBrowseButton.text")); // NOI18N
        inputBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputBrowseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        inputPanel.add(inputBrowseButton, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        inputPanel.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(inputPanel, gridBagConstraints);

        outputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.outputPanel.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION)); // NOI18N
        outputPanel.setMaximumSize(new java.awt.Dimension(550, 80));
        outputPanel.setMinimumSize(new java.awt.Dimension(550, 80));
        outputPanel.setPreferredSize(new java.awt.Dimension(550, 80));
        outputPanel.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, -12, 0, 0);
        outputPanel.add(jLabel2, gridBagConstraints);

        tf_OutputFiles.setEditable(false);
        tf_OutputFiles.setMaximumSize(new java.awt.Dimension(400, 30));
        tf_OutputFiles.setMinimumSize(new java.awt.Dimension(400, 30));
        tf_OutputFiles.setPreferredSize(new java.awt.Dimension(400, 30));
        tf_OutputFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_OutputFilesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        outputPanel.add(tf_OutputFiles, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(outputBrowseButton, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.outputBrowseButton.text")); // NOI18N
        outputBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputBrowseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        outputPanel.add(outputBrowseButton, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        outputPanel.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(outputPanel, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.jPanel6.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION)); // NOI18N
        jPanel6.setMaximumSize(new java.awt.Dimension(550, 80));
        jPanel6.setMinimumSize(new java.awt.Dimension(550, 80));
        jPanel6.setPreferredSize(new java.awt.Dimension(550, 80));
        jPanel6.setRequestFocusEnabled(false);
        jPanel6.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(cb_stdentropy, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.cb_stdentropy.text")); // NOI18N
        cb_stdentropy.setMaximumSize(new java.awt.Dimension(40, 23));
        cb_stdentropy.setMinimumSize(new java.awt.Dimension(40, 23));
        cb_stdentropy.setPreferredSize(new java.awt.Dimension(40, 23));
        cb_stdentropy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_stdentropyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel6.add(cb_stdentropy, gridBagConstraints);

        cmb_entropyThreshold.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10", "20", "30", "40", "50", "60", "70", "80", "90" }));
        cmb_entropyThreshold.setEnabled(false);
        cmb_entropyThreshold.setMaximumSize(new java.awt.Dimension(200, 22));
        cmb_entropyThreshold.setMinimumSize(new java.awt.Dimension(200, 22));
        cmb_entropyThreshold.setPreferredSize(new java.awt.Dimension(200, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(cmb_entropyThreshold, gridBagConstraints);

        cmb_bins.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sturges rule", "Rice rule", "User defined", "Number of instances", "Half number of instances", "One third number of instances", "Square root number of instances" }));
        cmb_bins.setSelectedIndex(3);
        cmb_bins.setEnabled(false);
        cmb_bins.setMaximumSize(new java.awt.Dimension(200, 22));
        cmb_bins.setMinimumSize(new java.awt.Dimension(200, 22));
        cmb_bins.setPreferredSize(new java.awt.Dimension(200, 22));
        cmb_bins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_binsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(cmb_bins, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lb_entropy_threshold, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.lb_entropy_threshold.text")); // NOI18N
        lb_entropy_threshold.setEnabled(false);
        lb_entropy_threshold.setMaximumSize(new java.awt.Dimension(180, 23));
        lb_entropy_threshold.setMinimumSize(new java.awt.Dimension(180, 23));
        lb_entropy_threshold.setPreferredSize(new java.awt.Dimension(180, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel6.add(lb_entropy_threshold, gridBagConstraints);

        txt_numBins.setText(org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.txt_numBins.text")); // NOI18N
        txt_numBins.setEnabled(false);
        txt_numBins.setMaximumSize(new java.awt.Dimension(60, 22));
        txt_numBins.setMinimumSize(new java.awt.Dimension(60, 22));
        txt_numBins.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(txt_numBins, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lb_num_bins, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.lb_num_bins.text")); // NOI18N
        lb_num_bins.setEnabled(false);
        lb_num_bins.setMaximumSize(new java.awt.Dimension(180, 23));
        lb_num_bins.setMinimumSize(new java.awt.Dimension(180, 23));
        lb_num_bins.setPreferredSize(new java.awt.Dimension(180, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel6.add(lb_num_bins, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel6, gridBagConstraints);

        jPanel1.setMaximumSize(new java.awt.Dimension(550, 40));
        jPanel1.setMinimumSize(new java.awt.Dimension(550, 40));
        jPanel1.setPreferredSize(new java.awt.Dimension(550, 40));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(runButton, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.runButton.text")); // NOI18N
        runButton.setMaximumSize(new java.awt.Dimension(100, 23));
        runButton.setMinimumSize(new java.awt.Dimension(100, 23));
        runButton.setPreferredSize(new java.awt.Dimension(100, 23));
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        jPanel1.add(runButton, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.cancelButton.text")); // NOI18N
        cancelButton.setMaximumSize(new java.awt.Dimension(100, 23));
        cancelButton.setMinimumSize(new java.awt.Dimension(100, 23));
        cancelButton.setPreferredSize(new java.awt.Dimension(100, 23));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel1.add(cancelButton, gridBagConstraints);

        jPanel2.setMaximumSize(new java.awt.Dimension(300, 10));
        jPanel2.setMinimumSize(new java.awt.Dimension(300, 10));
        jPanel2.setPreferredSize(new java.awt.Dimension(300, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel5.setPreferredSize(new java.awt.Dimension(5, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.jPanel7.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION)); // NOI18N
        jPanel7.setMaximumSize(new java.awt.Dimension(550, 80));
        jPanel7.setMinimumSize(new java.awt.Dimension(550, 80));
        jPanel7.setPreferredSize(new java.awt.Dimension(550, 80));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        cmb_corr_measure.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pearson", "Spearman" }));
        cmb_corr_measure.setEnabled(false);
        cmb_corr_measure.setMaximumSize(new java.awt.Dimension(120, 22));
        cmb_corr_measure.setMinimumSize(new java.awt.Dimension(120, 22));
        cmb_corr_measure.setPreferredSize(new java.awt.Dimension(120, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel7.add(cmb_corr_measure, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lb_redundancy_threshold, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.lb_redundancy_threshold.text")); // NOI18N
        lb_redundancy_threshold.setEnabled(false);
        lb_redundancy_threshold.setMaximumSize(new java.awt.Dimension(150, 23));
        lb_redundancy_threshold.setMinimumSize(new java.awt.Dimension(150, 23));
        lb_redundancy_threshold.setPreferredSize(new java.awt.Dimension(150, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel7.add(lb_redundancy_threshold, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(cb_intercorrelation, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.cb_intercorrelation.text")); // NOI18N
        cb_intercorrelation.setMaximumSize(new java.awt.Dimension(40, 23));
        cb_intercorrelation.setMinimumSize(new java.awt.Dimension(40, 23));
        cb_intercorrelation.setPreferredSize(new java.awt.Dimension(40, 23));
        cb_intercorrelation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_intercorrelationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel7.add(cb_intercorrelation, gridBagConstraints);

        cmb_correlationThreshold.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9" }));
        cmb_correlationThreshold.setSelectedIndex(7);
        cmb_correlationThreshold.setEnabled(false);
        cmb_correlationThreshold.setMaximumSize(new java.awt.Dimension(120, 22));
        cmb_correlationThreshold.setMinimumSize(new java.awt.Dimension(120, 22));
        cmb_correlationThreshold.setPreferredSize(new java.awt.Dimension(120, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel7.add(cmb_correlationThreshold, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(lb_correl_coef, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.lb_correl_coef.text")); // NOI18N
        lb_correl_coef.setEnabled(false);
        lb_correl_coef.setMaximumSize(new java.awt.Dimension(150, 23));
        lb_correl_coef.setMinimumSize(new java.awt.Dimension(150, 23));
        lb_correl_coef.setPreferredSize(new java.awt.Dimension(150, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel7.add(lb_correl_coef, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.jLabel3.text")); // NOI18N
        jLabel3.setPreferredSize(new java.awt.Dimension(180, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel7.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel7, gridBagConstraints);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.jPanel8.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION)); // NOI18N
        jPanel8.setMaximumSize(new java.awt.Dimension(550, 70));
        jPanel8.setMinimumSize(new java.awt.Dimension(550, 70));
        jPanel8.setPreferredSize(new java.awt.Dimension(550, 70));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(rb_top);
        org.openide.awt.Mnemonics.setLocalizedText(rb_top, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.rb_top.text")); // NOI18N
        rb_top.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_topActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel8.add(rb_top, gridBagConstraints);

        buttonGroup1.add(rb_all);
        rb_all.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(rb_all, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.rb_all.text")); // NOI18N
        rb_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_allActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel8.add(rb_all, gridBagConstraints);

        txt_top_feat.setText(org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.txt_top_feat.text")); // NOI18N
        txt_top_feat.setEnabled(false);
        txt_top_feat.setMaximumSize(new java.awt.Dimension(60, 22));
        txt_top_feat.setMinimumSize(new java.awt.Dimension(60, 22));
        txt_top_feat.setPreferredSize(new java.awt.Dimension(60, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel8.add(txt_top_feat, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel8, gridBagConstraints);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.jPanel9.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION)); // NOI18N
        jPanel9.setToolTipText(org.openide.util.NbBundle.getMessage(FeatureSelectionDialog.class, "FeatureSelectionDialog.jPanel9.toolTipText")); // NOI18N
        jPanel9.setMaximumSize(new java.awt.Dimension(550, 50));
        jPanel9.setMinimumSize(new java.awt.Dimension(550, 50));
        jPanel9.setPreferredSize(new java.awt.Dimension(550, 50));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        progressBar.setMaximumSize(new java.awt.Dimension(500, 20));
        progressBar.setMinimumSize(new java.awt.Dimension(500, 20));
        progressBar.setPreferredSize(new java.awt.Dimension(500, 20));
        progressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel9.add(progressBar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(jPanel9, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputBrowseButtonActionPerformed

        try {
            FileFilter[] filters = new FileFilter[1];

            filters[0] = GUIUtil.getCustomFileFilter(GUIUtil.CSV_EXTENSION, GUIUtil.CSV_DESCRIPTION);

            inputFiles = new GUIUtil().loadFilesLastInputDirectory(this, GUIUtil.INPUT_FILES_DIALOG_TITLE, true, filters);

            if (inputFiles != null) {
                String dir = inputFiles[0].getParent() + ";";

                for (int i = 0; i < inputFiles.length; i++) {
                    dir += inputFiles[i].getName() + ";";
                }

                tf_InputFiles.setText(dir);
            }

        } catch (Exception ex) {
            Logger.getLogger(FeatureSelectionDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_inputBrowseButtonActionPerformed

    private void outputBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputBrowseButtonActionPerformed
        Object[] info = new GUIUtil().loadFolderLastInputDirectory(this, false);

        int status = (int) info[0];

        if (status == JFileChooser.APPROVE_OPTION) {
            JFileChooser fileChooser = (JFileChooser) info[1];

            outputFolder = fileChooser.getSelectedFile();

            tf_OutputFiles.setText(outputFolder.getPath());
        }
    }//GEN-LAST:event_outputBrowseButtonActionPerformed

    private void cb_stdentropyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_stdentropyActionPerformed
        if (cb_stdentropy.isSelected()) {
            cmb_entropyThreshold.setEnabled(true);
            cmb_bins.setEnabled(true);            
            lb_num_bins.setEnabled(true);
            lb_entropy_threshold.setEnabled(true);
        } else {
            cmb_entropyThreshold.setEnabled(false);
            cmb_bins.setEnabled(false);
            lb_num_bins.setEnabled(false);
            lb_entropy_threshold.setEnabled(false);
        }
    }//GEN-LAST:event_cb_stdentropyActionPerformed

    private void cb_intercorrelationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_intercorrelationActionPerformed

        if (cb_intercorrelation.isSelected()) {
            cmb_correlationThreshold.setEnabled(true);
            cmb_corr_measure.setEnabled(true);
            lb_correl_coef.setEnabled(true);
            lb_redundancy_threshold.setEnabled(true);
        } else {
            cmb_correlationThreshold.setEnabled(false);
            cmb_corr_measure.setEnabled(false);
            lb_correl_coef.setEnabled(false);
            lb_redundancy_threshold.setEnabled(false);
        }
    }//GEN-LAST:event_cb_intercorrelationActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        if (!cb_stdentropy.isSelected() && !cb_intercorrelation.isSelected()) {
            GUIUtil.showMessage(this, "Please, select a feature reduction criteria", TITLE, JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            
            if (cb_stdentropy.isSelected() && !cb_intercorrelation.isSelected()) {
                rt = FeatureSelectionMethodType.ENTROPY;
            }
            
            if (!cb_stdentropy.isSelected() && cb_intercorrelation.isSelected()) {
                rt = FeatureSelectionMethodType.CORRELATION;
            }
            
            if (cb_stdentropy.isSelected() && cb_intercorrelation.isSelected()) {
                rt = FeatureSelectionMethodType.ENTROPY_CORRELATION;
            }
        }

        if (inputFiles == null) {
            GUIUtil.showMessage(this, "Please, select at least one input file", TITLE, JOptionPane.WARNING_MESSAGE);
        } else if (outputFolder == null) {
            GUIUtil.showMessage(this, "Please, select an output folder", TITLE, JOptionPane.WARNING_MESSAGE);
        }
        
        if (inputFiles != null && outputFolder != null && rt != null&&checkOptions()) {
                                WorkerFeatureSelection worker = new WorkerFeatureSelection();
				worker.addPropertyChangeListener(new ProgressListener(progressBar));
				worker.execute();
                                }
    }//GEN-LAST:event_runButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void tf_OutputFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_OutputFilesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_OutputFilesActionPerformed

    private void cmb_binsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_binsActionPerformed
        String bins = (String) cmb_bins.getSelectedItem();
        
        if(bins.equals("User defined")){
            txt_numBins.setEnabled(true);
        }
        else{
            txt_numBins.setEnabled(false);
            txt_numBins.setText("");
        }
    }//GEN-LAST:event_cmb_binsActionPerformed

    private void rb_topActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_topActionPerformed
        if(rb_top.isSelected()){
            txt_top_feat.setEnabled(true);
        }
    }//GEN-LAST:event_rb_topActionPerformed

    private void rb_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_allActionPerformed
        if(rb_all.isSelected()){
            txt_top_feat.setEnabled(false);
            txt_top_feat.setText("40");
        }
    }//GEN-LAST:event_rb_allActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FeatureSelectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FeatureSelectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FeatureSelectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FeatureSelectionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FeatureSelectionDialog dialog = new FeatureSelectionDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    class ProgressListener implements PropertyChangeListener {
	private JProgressBar bar;

	ProgressListener() {} 

	ProgressListener(JProgressBar b) {
		this.bar = b;
		bar.setValue(0);
                bar.setMaximum(inputFiles.length);
	}
        
         @Override
	public void propertyChange(PropertyChangeEvent evt) {
		//Determine whether the property is progress type
		if ("progress".equals(evt.getPropertyName())) { 
			bar.setValue((int) evt.getNewValue());
                        double progress = Math.floor((double)bar.getValue()/(double)bar.getMaximum()*100);
                        
                        if(progress<100){
                            
                        bar.setString("Completed "+progress+"%");
                        }
                        else{
                            bar.setValue(0);
                            bar.setString("0%");
                        }
		}
	}
    }

class WorkerFeatureSelection extends SwingWorker<Void, Void> {
	
	@Override
	protected Void doInBackground() throws Exception 
        {
            blockDuringTask(false);
            
            for (int k = 0; k < inputFiles.length; k++) 
            {
                File inputFile = inputFiles[k];
                
                int startPos = 1;
                List<String> rowNames = new LinkedList<>();

                // Read data
                System.out.println("Reading input file...");
                List<InstanceDescriptor> features = new LinkedList<>();
                List<Instance> instances = new LinkedList<>();
                try (CSVReader reader = new CSVReader(new FileReader(inputFile))) {
                    String[] firstLine = reader.readNext();
                    if (firstLine != null) {
                        if (rowNames != null) {
                            rowNames.add(firstLine[0]);
                        }

                        for (int i = startPos; i < firstLine.length; i++) {
                            features.add(new InstanceDescriptor(i, firstLine[i]));
                        }
                    }
                    int row = 1;
                    Instance inst;
                    String[] values;
                    while ((values = reader.readNext()) != null) {
                        if (values.length != features.size() + startPos) {
                            System.out.println(String.format("Error: The number of values (%d) for row instance %d does not correspond with the number of columns (%d)", values.length, row, features.size()));
                            return null;
                        }
                        if (rowNames != null) {
                            rowNames.add(values[0]);
                        }
                        inst = new Instance(row);
                        for (InstanceDescriptor feature : features) {
                            try {
                                inst.setAttributeValue(feature, Double.parseDouble(values[feature.getPos()]));
                            } catch (NumberFormatException ex) {
                                System.out.println(String.format("Error reading a double value at row %d column %d: ", row, feature.getPos() + 1));
                                System.out.println(ex.getMessage());
                                return null;
                            }
                        }
                        instances.add(inst);
                        row++;
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    return null;
                }

                System.out.println("Number of features: " + features.size());
                System.out.println("Number of instances: " + instances.size());

                String fileName = "";

                FeatureSEFiltering filtering = new FeatureSEFiltering();                
                FeatureDiscretization preprocessing =  new FeatureDiscretization();                
                int selectionOption = rb_all.isSelected()?0:1;                
                filtering.setSelectionOption(selectionOption);
                
                if(selectionOption==1)
                {
                    filtering.setTopRank(Integer.parseInt(txt_top_feat.getText()));
                }
                
                if (rt == FeatureSelectionMethodType.ENTROPY ||rt == FeatureSelectionMethodType.ENTROPY_CORRELATION) 
                {
                    //Stage I
                    if(rt==FeatureSelectionMethodType.ENTROPY)
                    {
                        filtering.setRedundancyOption(FeatureSEFiltering.REDUNDANCY_NONE);
                    }
                    
                    filtering.setEntropy(true);
                    filtering.setThresholdPercent((int) (getEntropyThreshold()));         
                    
                    System.out.println("threshold percent " + filtering.getThresholdPercent());
                    
                    String bin = (String) cmb_bins.getSelectedItem();
                    
                    if(bin.equals("Sturges rule")){
                        preprocessing.setBinsOption(FeatureDiscretization.BinsOption.Sturges_Rule);
                    }
                    if(bin.equals("Rice rule")){
                        preprocessing.setBinsOption(FeatureDiscretization.BinsOption.Rice_Rule);
                    } 
                    if(bin.equals("User defined")){
                        preprocessing.setBinsOption(FeatureDiscretization.BinsOption.User_Defined);
                        preprocessing.setNumberOfBins(Integer.parseInt(txt_top_feat.getText()));
                    } 
                    if(bin.equals("Number of instances")){
                        preprocessing.setBinsOption(FeatureDiscretization.BinsOption.Number_instances);
                    }
                    if(bin.equals("Half number of instances")){
                        preprocessing.setBinsOption(FeatureDiscretization.BinsOption.Half_number_instances);
                    }
                    if(bin.equals("One third number of instances")){
                        preprocessing.setBinsOption(FeatureDiscretization.BinsOption.One_third_number_instances);
                    }
                    if(bin.equals("Square root number of instances")){
                        preprocessing.setBinsOption(FeatureDiscretization.BinsOption.Square_root_number_instances);
                    }
                    
                    filtering.setPreprocessing(preprocessing);
                    
                    if(rt==FeatureSelectionMethodType.ENTROPY)
                    {
                        fileName = String.format("SE_%s", inputFile.getName());                        
                    }
                    
                    if(rt==FeatureSelectionMethodType.ENTROPY_CORRELATION)
                    {
                        fileName = String.format("SE_RD_%s", inputFile.getName());    
                    }
                }

                if (rt == FeatureSelectionMethodType.CORRELATION||rt == FeatureSelectionMethodType.ENTROPY_CORRELATION) {
                    
                    //Stage I
                    String corr_coef = (String) cmb_corr_measure.getSelectedItem();                    
                  
                    if(corr_coef.equals("Pearson")){
                    filtering.setRedundancyOption(FeatureSEFiltering.REDUNDANCY_PEARSON);
                    }
                    if(corr_coef.equals("Spearman")){
                    filtering.setRedundancyOption(FeatureSEFiltering.REDUNDANCY_SPEARMAN);
                    }
                    
                    filtering.setRedundancyCutoff(getCorrelationThreshold());
                    
                    // redundancy
                    System.out.println("redundancy cutoff " + filtering.getRedundancyCutoff());
                    
                    if(rt==FeatureSelectionMethodType.CORRELATION)
                    {
                        filtering.setEntropy(false);
                    
                        fileName = String.format("RD_%s", inputFile.getName());    
                    }
                    
                    if(rt==FeatureSelectionMethodType.ENTROPY_CORRELATION)
                    {
                        fileName = String.format("SE_RD_%s", inputFile.getName());    
                    }
                }
                
                filtering.initAlgo(features, instances);
                filtering.run();
                filtering.endAlgo();
                
                // output
                InstanceDescriptor[] descriptors = features.toArray(new InstanceDescriptor[0]);
                Arrays.parallelSort(descriptors, new FeatureComparator());

                File outputFile = new File(outputFolder, fileName);
                FeatureSelector.writeFeaturesData(descriptors, instances, (rowNames == null ? null : rowNames.toArray(new String[0])), outputFile);

                System.out.println();
                System.out.println("Output written to " + outputFile.getAbsolutePath());
                
               setProgress(k+1);
            }
            GUIUtil.showMessage(cmb_bins, "The process was sucessfully finished!", "Feature Selection", JOptionPane.INFORMATION_MESSAGE);
            
            return null;
	}

	@Override
	protected void done() 
        {
            blockDuringTask(true);           
	}

        @Override
        protected void process(List<Void> chunks) 
        {
            
        }		
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox cb_intercorrelation;
    private javax.swing.JCheckBox cb_stdentropy;
    private javax.swing.JComboBox<String> cmb_bins;
    private javax.swing.JComboBox<String> cmb_corr_measure;
    private javax.swing.JComboBox<String> cmb_correlationThreshold;
    private javax.swing.JComboBox<String> cmb_entropyThreshold;
    private javax.swing.JButton inputBrowseButton;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel lb_correl_coef;
    private javax.swing.JLabel lb_entropy_threshold;
    private javax.swing.JLabel lb_num_bins;
    private javax.swing.JLabel lb_redundancy_threshold;
    private javax.swing.JButton outputBrowseButton;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JRadioButton rb_all;
    private javax.swing.JRadioButton rb_top;
    private javax.swing.JButton runButton;
    private javax.swing.JTextField tf_InputFiles;
    private javax.swing.JTextField tf_OutputFiles;
    private javax.swing.JTextField txt_numBins;
    private javax.swing.JTextField txt_top_feat;
    // End of variables declaration//GEN-END:variables
}
