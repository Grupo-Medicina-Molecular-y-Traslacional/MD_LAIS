/*
 * AlgebraicFormPanel.java
 *
 * Created on March 24, 2010, 10:29 PM
 */
package tomocomd.camps.mdlais.gui.ui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import nu.xom.Element;
import org.openscience.cdk.qsar.IDescriptor;
import tomocomd.camps.mdlais.descriptors.MolecularDescriptorFactory;
import tomocomd.camps.mdlais.gui.CDKdesc;
import tomocomd.camps.mdlais.local.LocalType;
import tomocomd.camps.mdlais.weights.WeightConfiguration;
import tomocomd.camps.mdlais.properties.AminoAcidProperty;
import tomocomd.camps.mdlais.tools.invariants.InvariantType;

/**
 *
 * @author cesar
 */
public class MDLAIsFormPanel extends javax.swing.JPanel implements IFormPanel {

    private final CDKdesc cdk;

    private WeightConfiguration cutConfig;
    private GroupsDialog locales_dialog;
    private InvariantsDialog invariants_dialog;
    private PropertiesDialog propertiesDialog;
    private FuzzyWeightDialog cutoff_Dialog;
    private int totalDesc = 0;

    private Hashtable<String, String> list_cut_off;

    public ArrayList<String> list_AminoAcidProperties, list_locals, 
            list_group, list_invariants;

    public MDLAIsFormPanel(CDKdesc cdk) {
        this.cdk = cdk;

        initComponents();
        secondInit();
    }

    /**
     * This method initialize all the controls that the application need to
     * check the first conditions
     */
    private void secondInit() {
        list_locals = new ArrayList<>();
        list_AminoAcidProperties = new ArrayList<>();
        list_cut_off = new Hashtable<>();
        list_group = new ArrayList<>();
        list_invariants = new ArrayList<>();

        cutConfig = null;
        cb_keep_all.setSelected(false);
        cb_lag.setSelected(false);

        cb_total.setSelected(false);
        cb_local.setSelected(false);
        bt_locals.setEnabled(false);
        propertiesDialog = new PropertiesDialog(cdk);
        locales_dialog = new GroupsDialog(cdk);
        invariants_dialog = new InvariantsDialog(cdk);
        cutoff_Dialog = new FuzzyWeightDialog(cdk, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel6 = new javax.swing.JPanel();
        cutoffButton = new javax.swing.JButton();
        cb_keep_all = new javax.swing.JCheckBox();
        cb_lag = new javax.swing.JCheckBox();
        jWeightsButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cb_total = new javax.swing.JCheckBox();
        cb_local = new javax.swing.JCheckBox();
        bt_locals = new javax.swing.JButton();
        groupsButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        bt_invariants = new javax.swing.JButton();
        aggregationButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        bt_properties = new javax.swing.JButton();
        propertiesButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setAutoscrolls(true);
        setMaximumSize(new java.awt.Dimension(540, 380));
        setMinimumSize(new java.awt.Dimension(540, 380));
        setName(""); // NOI18N
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(540, 380));
        setLayout(new java.awt.GridBagLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Weights", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel6.setMaximumSize(new java.awt.Dimension(480, 110));
        jPanel6.setMinimumSize(new java.awt.Dimension(480, 110));
        jPanel6.setPreferredSize(new java.awt.Dimension(480, 110));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        cutoffButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/icons8-settings-16.png"))); // NOI18N
        cutoffButton.setText("Setup");
        cutoffButton.setEnabled(false);
        cutoffButton.setMaximumSize(new java.awt.Dimension(100, 25));
        cutoffButton.setMinimumSize(new java.awt.Dimension(100, 25));
        cutoffButton.setPreferredSize(new java.awt.Dimension(100, 25));
        cutoffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutoffButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel6.add(cutoffButton, gridBagConstraints);

        cb_keep_all.setText("(UW) Unweighted");
        cb_keep_all.setMaximumSize(new java.awt.Dimension(150, 23));
        cb_keep_all.setMinimumSize(new java.awt.Dimension(150, 23));
        cb_keep_all.setPreferredSize(new java.awt.Dimension(150, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel6.add(cb_keep_all, gridBagConstraints);

        cb_lag.setText("Fuzzy");
        cb_lag.setMaximumSize(new java.awt.Dimension(150, 23));
        cb_lag.setMinimumSize(new java.awt.Dimension(150, 23));
        cb_lag.setPreferredSize(new java.awt.Dimension(150, 23));
        cb_lag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_lagActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel6.add(cb_lag, gridBagConstraints);

        jWeightsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/panelhelp.png"))); // NOI18N
        jWeightsButton.setBorder(null);
        jWeightsButton.setContentAreaFilled(false);
        jWeightsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jWeightsButton.addActionListener( Util.openFile( cdk, "Weights.pdf" ) );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel6.add(jWeightsButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jPanel6, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Groups", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel3.setMaximumSize(new java.awt.Dimension(480, 110));
        jPanel3.setMinimumSize(new java.awt.Dimension(480, 110));
        jPanel3.setName(""); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(480, 110));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        cb_total.setText("Total");
        cb_total.setMaximumSize(new java.awt.Dimension(150, 23));
        cb_total.setMinimumSize(new java.awt.Dimension(150, 23));
        cb_total.setPreferredSize(new java.awt.Dimension(150, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(cb_total, gridBagConstraints);

        cb_local.setText("Local");
        cb_local.setToolTipText("");
        cb_local.setMaximumSize(new java.awt.Dimension(150, 23));
        cb_local.setMinimumSize(new java.awt.Dimension(150, 23));
        cb_local.setPreferredSize(new java.awt.Dimension(150, 23));
        cb_local.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_localActionPerformed(evt);
            }
        });
        jPanel3.add(cb_local, new java.awt.GridBagConstraints());

        bt_locals.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/icons8-settings-16.png"))); // NOI18N
        bt_locals.setText("Setup");
        bt_locals.setToolTipText("");
        bt_locals.setMaximumSize(new java.awt.Dimension(100, 25));
        bt_locals.setMinimumSize(new java.awt.Dimension(100, 25));
        bt_locals.setPreferredSize(new java.awt.Dimension(100, 25));
        bt_locals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_localsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(bt_locals, gridBagConstraints);

        groupsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/panelhelp.png"))); // NOI18N
        groupsButton.setBorder(null);
        groupsButton.setContentAreaFilled(false);
        groupsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        groupsButton.addActionListener( Util.openFile( cdk, "Local.pdf" ) );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel3.add(groupsButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPanel3, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel4.setMaximumSize(new java.awt.Dimension(480, 110));
        jPanel4.setMinimumSize(new java.awt.Dimension(480, 110));
        jPanel4.setName(""); // NOI18N
        jPanel4.setPreferredSize(new java.awt.Dimension(480, 110));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Aggregation Operators", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel5.setMaximumSize(new java.awt.Dimension(180, 50));
        jPanel5.setMinimumSize(new java.awt.Dimension(180, 50));
        jPanel5.setName(""); // NOI18N
        jPanel5.setPreferredSize(new java.awt.Dimension(220, 80));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        bt_invariants.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/icons8-settings-16.png"))); // NOI18N
        bt_invariants.setText("Setup");
        bt_invariants.setMaximumSize(new java.awt.Dimension(100, 25));
        bt_invariants.setMinimumSize(new java.awt.Dimension(100, 25));
        bt_invariants.setPreferredSize(new java.awt.Dimension(100, 25));
        bt_invariants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_invariantsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel5.add(bt_invariants, gridBagConstraints);

        aggregationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/panelhelp.png"))); // NOI18N
        aggregationButton.setBorder(null);
        aggregationButton.setContentAreaFilled(false);
        aggregationButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        aggregationButton.addActionListener( Util.openFile( cdk, "Invariants.pdf" ) );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel5.add(aggregationButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel4.add(jPanel5, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Properties", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel1.setPreferredSize(new java.awt.Dimension(220, 80));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        bt_properties.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/icons8-settings-16.png"))); // NOI18N
        bt_properties.setText("Setup");
        bt_properties.setMaximumSize(new java.awt.Dimension(100, 25));
        bt_properties.setMinimumSize(new java.awt.Dimension(100, 25));
        bt_properties.setPreferredSize(new java.awt.Dimension(100, 25));
        bt_properties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_propertiesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(bt_properties, gridBagConstraints);

        propertiesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tomocomd/camps/mdlais/gui/data/panelhelp.png"))); // NOI18N
        propertiesButton.setBorder(null);
        propertiesButton.setContentAreaFilled(false);
        propertiesButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        propertiesButton.addActionListener( Util.openFile( cdk, "Properties.pdf" ) );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(propertiesButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jPanel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jPanel4, gridBagConstraints);

        getAccessibleContext().setAccessibleParent(this);
    }// </editor-fold>//GEN-END:initComponents

    private boolean actionCommon() {
        generateGroup();
        generateProperty();

        //empty lists
        list_invariants.clear();
        list_group.clear();

        list_cut_off.clear();
        cutConfig = null;

        if (!generateInvariants()) {
            return false;
        }

        if (cb_total.isSelected()) {
            list_group.add("total");
        }

        if (cb_keep_all.isSelected()) {
            list_cut_off.put("all", "");
        }

        if (cb_lag.isSelected()) {
            list_cut_off.put("lag", "");

            if (cutoff_Dialog != null) {
                if ((cutConfig = cutoff_Dialog.getCutoffConfiguration()) == null) 
                {
                    return false;
                }

                list_cut_off.putAll(cutoff_Dialog.getCutoffList());
            }
        }

        if (cb_keep_all.isSelected() && cutConfig != null) {
            cutConfig.setKa(true);
        }

        if (list_AminoAcidProperties.isEmpty()) {
            JOptionPane.showMessageDialog(cdk, "You must select at least one property.",
                    "Warning", JOptionPane.WARNING_MESSAGE);
       } else if (list_locals.isEmpty() && cb_local.isSelected()) {
            JOptionPane.showMessageDialog(cdk, "You must select at least one group",
                    "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!cb_total.isSelected() && !cb_local.isSelected()) {
            JOptionPane.showMessageDialog(cdk, "You must select Total and/or Local indices.",
                    "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (list_invariants.isEmpty()) {
            JOptionPane.showMessageDialog(cdk, "You must select at least one agreggation operator.",
                    "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!cb_keep_all.isSelected() && !cb_lag.isSelected()) {
            JOptionPane.showMessageDialog(cdk, "You must select at least one weight.",
                    "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (cb_lag.isSelected() && list_cut_off.size() < 2) {
            JOptionPane.showMessageDialog(cdk, "You must configure at least one fuzzy weight.",
                    "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            return true;
        }

        return false;
    }

    private boolean buttonApplyAction() {
        if (actionCommon()) {
            computeDescriptorClasses();

            int totalInvariants = getNoClassicsInvariantList().size()
                    + (getNoClassicsInvariantList().contains(InvariantType.GOWAWA.toString()) ? invariants_dialog.getNumberOWAWAConfigurations() - 1 : 0)
                    + (getNoClassicsInvariantList().contains(InvariantType.CHOQUET.toString()) ? invariants_dialog.getNumberChoquetConfigurations() - 1 : 0);

            totalDesc = cSelectedDescriptors * totalInvariants;

            // count the number of occurences of each group of classic invariatnt
            if (!getClassicsInvariantList().isEmpty()) {
                int classicLag = 0;
                int classicSimple = 0;
                int classicNormal = 0;
                int classicAPM = 0;
                for (int invIndex = 0; invIndex < getClassicsInvariantList().size(); invIndex++) {
                    String currentInv = getClassicsInvariantList().get(invIndex);
                    switch (currentInv) {
                        case "ac":
                        case "gv":
                        case "ts":
                        case "kh":
                        case "gc":
                        case "rdf":
                        case "is":
                        case "mse":
                            classicLag++;
                            break;
                        case "sic":
                        case "tic":
                        case "sicn":
                        case "ticn":
                            classicSimple++;
                            break;
                        case "mic":
                        case "micn":
                        case "h":
                        case "es":
                        case "ib":
                        case "pcd":
                        case "cei":
                        case "bft":
                        case "lai":
                            classicNormal++;
                            break;

                        case "apm":
                            classicAPM = 1;
                            break;
                    }
                }

                totalDesc = (totalDesc * 7 * classicLag) + (cSelectedDescriptors * classicSimple) + (totalDesc * classicNormal) + (classicAPM * totalDesc * 3);

                if (cb_keep_all.isSelected() && cb_lag.isSelected()) {
                    totalDesc *= 2;
                }
            }

            return true;
        }

        return false;
    }

    private int cSelectedDescriptors;

    private void computeDescriptorClasses() {
        cSelectedDescriptors = list_AminoAcidProperties.size()*getGroupsList().size();
    }

   /**
     * Here we comment the others line because isn't the goal of the project
     */
    private void bt_localsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_localsActionPerformed

        locales_dialog.setModal(true);
        locales_dialog.setVisible(true);
    }//GEN-LAST:event_bt_localsActionPerformed
    private void bt_propertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_propertiesActionPerformed

        propertiesDialog.setModal(true);
        propertiesDialog.setVisible(true);
    }//GEN-LAST:event_bt_propertiesActionPerformed

    private void cb_localActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_localActionPerformed

        if (cb_local.isSelected()) {
            bt_locals.setEnabled(true);
        } else {
            bt_locals.setEnabled(false);

            locales_dialog.clearAllSelections();
        }
    }//GEN-LAST:event_cb_localActionPerformed

    private void bt_invariantsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_invariantsActionPerformed

        invariants_dialog.setModal(true);
        invariants_dialog.setVisible(true);
    }//GEN-LAST:event_bt_invariantsActionPerformed

    private ArrayList<String> union(ArrayList<String> list1, ArrayList<String> list2) {
        ArrayList<String> result = new ArrayList<>();
        for (String s : list1) {
            result.add(s);
        }
        for (String s : list2) {
            if (!result.contains(s)) {
                result.add(s);
            }
        }
        return result;
    }

    private void cutoffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutoffButtonActionPerformed
        cutoff_Dialog.setVisible(true);
    }//GEN-LAST:event_cutoffButtonActionPerformed

    private void cb_lagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_lagActionPerformed

        cutoffButton.setEnabled(cb_lag.isSelected());
    }//GEN-LAST:event_cb_lagActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aggregationButton;
    private javax.swing.JButton bt_invariants;
    private javax.swing.JButton bt_locals;
    private javax.swing.JButton bt_properties;
    private javax.swing.JCheckBox cb_keep_all;
    private javax.swing.JCheckBox cb_lag;
    private javax.swing.JCheckBox cb_local;
    private javax.swing.JCheckBox cb_total;
    private javax.swing.JButton cutoffButton;
    private javax.swing.JButton groupsButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jWeightsButton;
    private javax.swing.JButton propertiesButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public ArrayList<String> getInvariantsList() {
        return list_invariants;
    }

    @Override
    public ArrayList<String> getNoClassicsInvariantList() {
        return invariants_dialog.getNoClassicsInvariants();
    }

    @Override
    public ArrayList<String> getClassicsInvariantList() {
        return invariants_dialog.getClassicsInvariantsList();
    }

    @Override
    public int getSelectedDescriptors() {
        return cSelectedDescriptors;
    }

    @Override
    public int getTotalDesc() {
        return totalDesc;
    }

    @Override
    public ArrayList<String> getGroupsList() {
        return union(list_group, list_locals);
    }

    @Override
    public Hashtable<String, String> getCutOffsList() {
        return list_cut_off;
    }

    @Override
    public void setPanelAttribute(String attribute) {
        switch (attribute) {
            case "all":
                list_cut_off.clear();
                list_cut_off.put("all", "");
                cb_keep_all.setSelected(true);
                break;
            case "total":
                cb_total.setSelected(true);
                break;
            case "local":
                cb_local.setSelected(true);
                bt_locals.setEnabled(true);
                break;
        }

        if (attribute.startsWith("lag") && !cb_lag.isSelected()) {
            list_cut_off.clear();
            list_cut_off.put("lag", "");
            cb_lag.setSelected(true);
            cutoffButton.setEnabled(true);
        }
    }

    @Override
    public boolean doApply() {
        return buttonApplyAction();
    }

    @Override
    public void initialize() {
        secondInit();
    }

    @Override
    public void setBlockDuringCompute(boolean status) {
        cb_keep_all.setEnabled(status);
        cb_lag.setEnabled(status);
        if (cb_lag.isSelected()) {
            cutoffButton.setEnabled(status);
        }
        cb_total.setEnabled(status);
        cb_local.setEnabled(status);

        if (cb_local.isSelected()) {
            bt_locals.setEnabled(status);
        }

        bt_invariants.setEnabled(status);
        bt_properties.setEnabled(status);
    }

    @Override
    public WeightConfiguration getCutoffConfiguration() {
        return cutConfig;
    }

    @Override
    public void readConfiguration(Element root) {
        cutoff_Dialog.readConfiguration(root);
        locales_dialog.readConfiguration(root, this);
        propertiesDialog.readConfiguration(root);
        invariants_dialog.readConfiguration(root);
    }

    @Override
    public void saveConfiguration(Element root) {
        propertiesDialog.saveConfiguration(root);
        locales_dialog.saveConfiguration(cb_total.isSelected(), root);
        invariants_dialog.saveConfiguration(root);
        cutoff_Dialog.saveConfiguration(root, cb_keep_all.isSelected());
    }

    private void generateGroup() {
        locales_dialog.generate();
        list_locals = locales_dialog.getList_Groups();
    }

    private void generateProperty() {
        propertiesDialog.generate();
        list_AminoAcidProperties = propertiesDialog.getList_AminoacidProperties();
    }

    private boolean generateInvariants() {
        invariants_dialog.generate();
        list_invariants.clear();
        list_invariants.addAll(invariants_dialog.getClassicsInvariantsList());
        list_invariants.addAll(invariants_dialog.getNoClassicsInvariants());

        return !list_invariants.isEmpty();
    }

    @Override
    public ArrayList<String> getAminoAcidPropertiesList() {
        return list_AminoAcidProperties;
    }

    public PropertiesDialog getPropsDialog() {
        return propertiesDialog;
    }

    @Override
    public void setAALevel() {
        boolean status = cdk.getAppMenu().getAADialog().isAALevel();
        cdk.getUI().setIsAA_level(status);
    }

    public int getWindowSize() {
        return cdk.getAppMenu().getAADialog().getWindowSize();
    }

    @Override
    public List<IDescriptor> getDescriptorList() {
        // invariants
        List<String> noClassicInv = getNoClassicsInvariantList();

        List<String> classicInv = getClassicsInvariantList();

        List<AminoAcidProperty> aminoAcidProperties = new ArrayList<>();

        for (String property : getAminoAcidPropertiesList()) 
        {
            aminoAcidProperties.add(AminoAcidProperty.valueOf(property.toLowerCase()));
        }

        // groups
        List<LocalType[]> locals = new ArrayList<>();

        for (String local : getGroupsList()) 
        {
            String[] locaux = local.split("-");
            LocalType[] loc = new LocalType[locaux.length];
            
            for (int i = 0; i < loc.length; i++) 
            {
                loc[i] = LocalType.valueOf(locaux[i].toLowerCase());
            }
            
            locals.add(loc);
        }

        List<IDescriptor> selectedDescriptors = new ArrayList<>();

        selectedDescriptors.addAll(MolecularDescriptorFactory.getAlgebraicDescriptors(classicInv, noClassicInv, aminoAcidProperties, locals, getCutoffConfiguration()));

        return selectedDescriptors;
    }

   class MyModel extends SpinnerNumberModel {

        public MyModel(int value, int minimum, int maximum, int stepSize) {
            super(value, minimum, maximum, stepSize);
        }

        @Override
        public Object getNextValue() {
            //setStepSize( Integer.parseInt( getValue().toString() ) );
            return super.getNextValue();
        }

        @Override
        public Object getPreviousValue() {
            //setStepSize( Integer.parseInt( getValue().toString() ) );
            return super.getPreviousValue();
        }
    }

    @Override
    public HashMap<InvariantType, Object[]> getInvParameters() {
        return invariants_dialog.getInvariantParameters();
    }
}
